/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 27.04.2023 15:28:32

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242432;
#else
constexpr int kTensorArenaSize = 241408;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[27];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int8_t tensor_data2[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 46,-5,29, -2,-21,17, -127,-121,-68, 
  /* [1][1][][] */ 4,-4,0, -19,5,-4, -4,-37,-1, 
  /* [1][2][][] */ -1,19,1, -3,8,-1, 37,-21,10, 
  /* [2][0][][] */ 28,-8,-8, 79,116,4, 42,-37,9, 
  /* [2][1][][] */ 4,6,-7, 71,127,-26, 21,-4,-6, 
  /* [2][2][][] */ 46,-68,17, 73,-43,-21, 34,-53,16, 
  /* [3][0][][] */ 4,30,0, 37,99,25, 1,6,-4, 
  /* [3][1][][] */ 17,33,2, 67,127,26, -12,-18,4, 
  /* [3][2][][] */ 5,2,3, 29,28,10, -6,-9,-2, 
  /* [4][0][][] */ 42,77,-9, 23,93,-5, -13,13,1, 
  /* [4][1][][] */ 51,100,55, 34,127,32, 29,52,-18, 
  /* [4][2][][] */ 56,79,34, 45,121,11, -24,23,19, 
  /* [5][0][][] */ 14,7,-114, -2,2,-102, -7,26,-29, 
  /* [5][1][][] */ 5,-42,-127, -4,-47,-117, -4,10,-26, 
  /* [5][2][][] */ 1,11,-15, 0,-4,-13, 5,17,-7, 
  /* [6][0][][] */ 25,-62,35, 46,-88,38, 10,-20,9, 
  /* [6][1][][] */ 36,-96,61, 64,-127,71, 9,-27,18, 
  /* [6][2][][] */ 20,-35,12, 15,-43,26, -11,9,0, 
  /* [7][0][][] */ -32,17,4, -117,-45,-4, -24,26,3, 
  /* [7][1][][] */ -13,-7,2, -127,-92,-3, -8,-6,4, 
  /* [7][2][][] */ -22,34,-6, -9,16,5, -23,25,-3, 
  /* [8][0][][] */ 32,36,22, 113,119,103, 123,127,112, 
  /* [8][1][][] */ 48,50,36, 6,9,-5, -40,-37,-53, 
  /* [8][2][][] */ 94,96,83, -11,-6,-21, -89,-86,-101, 
  /* [9][0][][] */ -18,-1,11, -14,-7,-1, 1,1,-12, 
  /* [9][1][][] */ 91,108,-11, 75,127,19, -3,23,29, 
  /* [9][2][][] */ -21,-19,20, 10,-23,7, 11,4,-18, 
  /* [10][0][][] */ -25,-83,-18, 34,94,20, -9,-13,-3, 
  /* [10][1][][] */ -58,-102,-13, 79,127,15, -17,-26,0, 
  /* [10][2][][] */ -31,-19,2, 36,23,-11, -8,0,8, 
  /* [11][0][][] */ -1,-12,12, 20,-28,17, 16,-87,-42, 
  /* [11][1][][] */ -36,-32,-10, -19,-45,-21, -7,-48,-43, 
  /* [11][2][][] */ 1,-29,-66, 118,127,68, -29,20,-36, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-97,-17, -61,-110,-25, -9,-17,-5, 
  /* [13][1][][] */ 61,114,15, 58,127,25, 8,16,11, 
  /* [13][2][][] */ -9,-19,3, 1,-19,-2, 0,4,-4, 
  /* [14][0][][] */ 46,-6,-38, 79,-27,-51, 31,-11,-21, 
  /* [14][1][][] */ 90,-17,-74, 127,-41,-90, 59,-19,-38, 
  /* [14][2][][] */ 55,-10,-46, 74,-22,-53, 25,-7,-19, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant2_scale = { 16, { 3.3410194077987398e-07, 0.038089893758296967, 0.04398307204246521, 0.0088264262303709984, 0.0023663521278649569, 0.043492935597896576, 0.099074915051460266, 0.059822339564561844, 0.0012506414204835892, 0.0095711173489689827, 0.015875395387411118, 0.0040099597536027431, 2.9411381774480105e-07, 0.012311827391386032, 0.12758898735046387, 3.1706054670621597e-08, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { -1073741824, 17745, -104276, 23693, 337200, 27168, 9157, 11442, 7287, 44778, 48104, 366260, -1073741824, 78639, 6333, -1073741824, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 1.3102037232926023e-09, 0.00014937213563825935, 0.00017248264339286834, 3.4613436582731083e-05, 9.2798127298010513e-06, 0.00017056053911801428, 0.00038852909347042441, 0.00023459742078557611, 4.9044765546568669e-06, 3.7533794966293499e-05, 6.2256454839371145e-05, 1.5725332559668459e-05, 1.1533876076441629e-09, 4.8281679482897744e-05, 0.00050034897867590189, 1.243374708748135e-10, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-83,-126,39,-67,79,-76,-90,-3,-8,29,-127,5,54,-73, 51,24,-127,127,127,-127,127,-127,-84,127,-127,51,-105,5,127,-25, 24,-24,89,-2,-72,67,-95,77,-95,-27,3,-16,61,1,-102,-29, 
  /* [0][1][][] */ -127,127,-23,13,-43,15,-29,14,-29,1,3,-109,-49,8,-30,-14, -78,-42,-58,-15,-7,-26,8,-28,-108,-89,21,-12,-104,-127,1,23, 14,1,64,2,3,34,-26,33,-127,6,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-73,67,2,-6,39,-40,52,-76,0,0,4,40,2,-27,23, 23,-4,30,-2,-27,40,-35,20,-125,-13,0,84,-58,0,-29,-111, 21,-7,18,0,4,14,9,22,-114,4,-1,-127,107,2,17,-127, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant4_scale = { 16, { 0.079427838325500488, 0.0040179169736802578, 0.0089881196618080139, 0.0097589213401079178, 0.0063901031389832497, 0.0016461743507534266, 0.016577968373894691, 0.0038042063824832439, 0.0025362442247569561, 0.010425359010696411, 0.0081435665488243103, 0.030203768983483315, 0.030907778069376945, 0.0097172670066356659, 0.0089370943605899811, 0.16606816649436951, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 3 };
const ALIGN(16) int32_t tensor_data5[16] = { -161, 27535, 18993, 15218, 11952, 85663, 13661, 43597, 7212, 7313, 30351, 14079, -445, 27407, 9951, -107, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 0.0018688903655856848, 9.4539223937317729e-05, 0.00021148516680113971, 0.00022962168441154063, 0.00015035536489449441, 3.8733516703359783e-05, 0.0003900698502548039, 8.9510736870579422e-05, 5.9676334785763174e-05, 0.00024530256632715464, 0.00019161333329975605, 0.00071067694807425141, 0.00072724185883998871, 0.00022864158381707966, 0.00021028457558713853, 0.003907486330717802, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*1*16] = { 
  /* [0][0][][] */ 0,-20,3,-1,127,1,3,1,4,-125,-92,-3,0,123,0,0, 
  /* [1][0][][] */ 0,-33,2,85,74,14,24,5,9,-8,127,-44,0,27,-11,0, 
  /* [2][0][][] */ 0,2,-4,-11,-58,2,12,1,-4,3,-20,2,0,127,-7,0, 
  /* [3][0][][] */ 0,-12,-17,-127,82,27,69,18,3,60,1,42,0,-2,20,0, 
  /* [4][0][][] */ 0,49,-25,37,-55,34,127,13,-7,-63,21,-8,0,-6,14,0, 
  /* [5][0][][] */ 0,-17,-11,-1,-21,-22,-11,17,0,10,-4,-45,0,-3,127,0, 
  /* [6][0][][] */ 0,17,-2,1,51,-19,-27,-7,-3,-105,114,62,0,127,59,0, 
  /* [7][0][][] */ 0,14,-15,127,8,-2,15,8,5,68,-51,78,0,-8,48,0, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant6_scale = { 8, { 0.085741214454174042, 0.086661674082279205, 0.10122969746589661, 0.046955570578575134, 0.055521409958600998, 0.10574033111333847, 0.060397811233997345, 0.040189173072576523, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -3572, -42730, -7747, -13982, -33924, -3027, -25014, -27076, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.0020174402743577957, 0.0020390981808304787, 0.002381875179708004, 0.0011048369342461228, 0.0013063861988484859, 0.0024880077689886093, 0.0014211250236257911, 0.00094562763115391135, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[48*1*1*8] = { 
  /* [0][0][][] */ 14,-127,49,-48,21,-24,-42,31, 
  /* [1][0][][] */ 60,69,-27,-90,8,-14,-73,127, 
  /* [2][0][][] */ 30,9,-47,127,52,121,52,93, 
  /* [3][0][][] */ 73,72,-88,127,-94,-11,-5,15, 
  /* [4][0][][] */ -35,-99,60,14,7,33,-37,-127, 
  /* [5][0][][] */ 21,6,-35,41,-4,-37,46,127, 
  /* [6][0][][] */ 57,-23,-127,-74,122,16,55,-38, 
  /* [7][0][][] */ 127,18,18,-26,36,5,81,-57, 
  /* [8][0][][] */ 18,-114,6,112,6,29,-16,-127, 
  /* [9][0][][] */ 112,-127,14,-5,-11,11,-118,91, 
  /* [10][0][][] */ -120,-33,-127,25,0,14,-116,62, 
  /* [11][0][][] */ -22,-44,-6,-100,-127,-37,46,-18, 
  /* [12][0][][] */ 17,5,-37,65,-71,-20,58,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -3,-36,-3,15,47,127,50,36, 
  /* [15][0][][] */ 41,9,28,-127,63,47,-64,64, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 23,21,127,19,-27,-9,27,31, 
  /* [18][0][][] */ 82,-127,21,34,-3,23,-119,4, 
  /* [19][0][][] */ -127,-10,30,78,-66,-77,-93,92, 
  /* [20][0][][] */ 36,31,-45,120,-19,-127,-4,59, 
  /* [21][0][][] */ 60,21,127,6,-13,-11,61,12, 
  /* [22][0][][] */ -74,-18,-127,3,5,14,-102,3, 
  /* [23][0][][] */ -98,127,-23,-21,-1,-4,126,-86, 
  /* [24][0][][] */ 3,-54,-56,86,-11,-63,95,127, 
  /* [25][0][][] */ 13,57,36,30,127,122,-72,-52, 
  /* [26][0][][] */ -79,-32,-127,-5,10,24,-103,1, 
  /* [27][0][][] */ 2,-23,-29,8,-53,127,74,55, 
  /* [28][0][][] */ 4,-21,-22,41,19,127,54,73, 
  /* [29][0][][] */ 84,17,127,-9,-15,-21,81,-13, 
  /* [30][0][][] */ -79,127,-28,-30,9,-12,108,-43, 
  /* [31][0][][] */ -47,-98,-21,0,33,-71,127,111, 
  /* [32][0][][] */ 9,6,-50,127,-15,104,98,123, 
  /* [33][0][][] */ 0,62,-15,-101,8,-14,-9,127, 
  /* [34][0][][] */ -30,91,-15,-102,36,-12,19,127, 
  /* [35][0][][] */ 127,12,-14,-32,11,28,101,-43, 
  /* [36][0][][] */ -127,-6,15,65,-37,6,-122,88, 
  /* [37][0][][] */ -7,-30,-8,30,32,127,42,64, 
  /* [38][0][][] */ 12,21,4,81,127,-8,-19,34, 
  /* [39][0][][] */ 6,18,35,-122,27,-7,-39,127, 
  /* [40][0][][] */ 102,24,127,10,-5,-1,88,-3, 
  /* [41][0][][] */ 0,-26,-34,90,54,127,82,112, 
  /* [42][0][][] */ -67,-5,127,21,-28,18,-29,65, 
  /* [43][0][][] */ -13,-57,4,104,-20,0,19,-127, 
  /* [44][0][][] */ 39,8,-51,-127,74,-38,-1,-88, 
  /* [45][0][][] */ -80,127,-2,-53,11,3,70,-54, 
  /* [46][0][][] */ -127,-27,35,28,-22,50,-94,39, 
  /* [47][0][][] */ 105,19,122,3,20,-26,127,-13, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0010012928396463394, 0.00092031288659200072, 0.00062111002625897527, 0.00057708052918314934, 0.00054369267309084535, 0.00061494915280491114, 0.00065376434940844774, 0.0029331797268241644, 0.00073480943683534861, 0.0045539382845163345, 0.0012657535262405872, 0.003798771183937788, 0.00036964460741728544, 3.937008052901092e-09, 0.0017299975734204054, 0.00031321326969191432, 3.937008052901092e-09, 0.012517518363893032, 0.00082182371988892555, 0.00057850114535540342, 0.00054836267372593284, 0.009279775433242321, 0.00066408416023477912, 0.002909019123762846, 0.0020905002020299435, 0.0012364446884021163, 0.0045126583427190781, 0.0042139547877013683, 0.00050631724298000336, 0.0035733229015022516, 0.0023841182701289654, 0.00031306600430980325, 0.00039544532774016261, 0.018965210765600204, 0.00088915525702759624, 0.0012165684020146728, 0.0082231182605028152, 0.00064144039060920477, 0.0053887916728854179, 0.00050179567188024521, 0.0025500662159174681, 0.00034604256507009268, 0.00092140666674822569, 0.017257744446396828, 0.00080439972225576639, 0.0010850293328985572, 0.00060733116697520018, 0.0003936931025236845, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[48] = { 4559, 16, 11327, 7268, 8353, 7599, 13026, -20, -36, -369, 2607, 489, 13314, -92363224, 3406, 23556, -74560384, -131, -583, 15027, 4392, -21, -60, 484, 4060, -987, 80, 666, 5007, 1834, 2752, 16898, 4236, 382, 327, -2246, 422, 4469, -141, 15370, 2508, 14242, -422, -109, 14061, 232, 10324, 5101, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.00044658363913185894, 0.00041046598926186562, 0.00027701942599378526, 0.00025738196563906968, 0.00024249074340332299, 0.00027427164604887366, 0.00029158347751945257, 0.0013082186924293637, 0.00032773017301224172, 0.0020310883410274982, 0.00056453497381880879, 0.0016942785587161779, 0.00016486409003846347, 1.7559331766392461e-09, 0.0007715910323895514, 0.00013969531573820859, 1.7559331766392461e-09, 0.0055829011835157871, 0.00036653914139606059, 0.00025801555602811277, 0.00024457360268570483, 0.0041388450190424919, 0.00029618619009852409, 0.0012974429409950972, 0.00093237776309251785, 0.00055146298836916685, 0.0020126772578805685, 0.0018794534262269735, 0.00022582104429602623, 0.0015937270363792777, 0.0010633334750309587, 0.00013962962839286774, 0.0001763713953550905, 0.0084586171433329582, 0.00039656949229538441, 0.00054259801981970668, 0.0036675683222711086, 0.00028608689899556339, 0.0024034387897700071, 0.00022380438167601824, 0.0011373474262654781, 0.00015433740918524563, 0.00041095382766798139, 0.0076970751397311687, 0.00035876792389899492, 0.00048393069300800562, 0.00027087394846603274, 0.00017558988474775106, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[1*3*3*48] = { 
  /* [0][0][][] */ -43,-23,-6,-16,6,-39,-78,-68,-27,-50,7,68,34,-71,115,-45,-113,-87,38,-6,-1,-70,-109,-78,-35,-127,-62,-22,70,15,96,26,-127,-85,-7,55,19,48,-127,77,-76,-14,104,-107,-3,-36,-89,109, 75,12,-28,-29,58,-127,-127,-79,60,-76,-115,110,38,-82,-1,62,-52,-116,58,8,11,-110,-127,-72,-4,-126,-121,-40,-55,21,-57,54,28,-127,66,83,14,72,-93,127,-127,6,124,-127,1,-23,-127,94, -31,42,7,-5,-66,-108,-58,-19,85,-8,-127,39,8,-71,-101,-11,-127,-23,27,12,-15,-77,-36,-21,-11,-29,-57,-10,-9,16,-23,9,107,-88,71,32,14,36,-4,15,-78,3,6,-75,-18,6,-55,15, 
  /* [0][1][][] */ -86,-127,-44,-44,-11,55,98,-105,-28,-108,-21,113,89,-64,27,-96,-121,-97,90,-77,41,-91,-102,-127,42,-122,-78,-35,127,-61,127,84,-43,-83,-14,83,-34,-77,-107,89,41,59,106,-106,-91,-118,83,120, 127,-81,-127,-127,127,41,92,-127,99,-127,-111,127,127,-14,-6,127,-60,-127,127,-127,127,-127,-120,-117,127,-100,-127,-127,-120,-127,-70,127,28,-109,127,127,-69,-127,-98,89,60,127,127,-114,-112,-127,127,127, -53,30,-61,-85,-121,-23,30,-38,127,-20,-78,35,55,-70,-26,-43,-37,-31,54,-71,56,-82,-38,-24,47,-5,-47,-59,15,-89,-35,20,30,-96,118,26,-36,-62,2,-15,36,53,10,-72,-58,-36,65,37, 
  /* [0][2][][] */ -61,-104,-33,-34,-1,35,-5,-34,-37,-59,-16,61,75,-127,-127,-63,-43,-16,65,75,51,-30,-14,-62,33,-55,-12,-59,76,28,78,63,109,-24,-39,-10,-95,34,-17,30,11,37,14,-57,95,-78,4,30, 88,-75,-88,-85,81,19,7,-46,47,-70,-33,57,81,-26,16,93,-24,-31,77,118,81,-50,-19,-57,94,-69,-19,-102,-51,39,-46,112,-18,-50,70,6,-127,51,-15,-2,11,32,16,-64,127,-101,-11,40, -28,31,-41,-36,-80,-19,21,-13,59,-4,-14,34,30,-43,112,-29,-93,-6,30,60,73,-30,0,-1,43,4,-3,-63,-13,29,-19,40,-90,-40,64,4,-20,21,27,-38,7,34,-4,-14,62,-34,-4,19, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.0034629416186362505, 0.0031226326245814562, 0.010658380575478077, 0.0048708710819482803, 0.005314946174621582, 0.0083603570237755775, 0.0057504004798829556, 0.0025345329195261002, 0.0036074831150472164, 0.001387008698657155, 0.0035011966247111559, 0.0015262048691511154, 0.0077842520549893379, 0.23551659286022186, 0.0030006645247340202, 0.0088867489248514175, 0.1168077290058136, 0.00087735243141651154, 0.0043741143308579922, 0.0067825093865394592, 0.0051033347845077515, 0.0064318543300032616, 0.0062141264788806438, 0.0016268108738586307, 0.0037733498029410839, 0.0045407884754240513, 0.0015149029204621911, 0.0027734935283660889, 0.011261684820055962, 0.0021030798088759184, 0.0018304856494069099, 0.008703671395778656, 0.011337874457240105, 0.00058678572531789541, 0.0036115958355367184, 0.010234089568257332, 0.0007180633838288486, 0.019467899575829506, 0.0016721490537747741, 0.0042488891631364822, 0.0025089872069656849, 0.011651124805212021, 0.0048663890920579433, 0.00049940688768401742, 0.006808754988014698, 0.0035543383564800024, 0.0087444055825471878, 0.0059194979257881641, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const ALIGN(16) int32_t tensor_data11[48] = { 74349, 54496, 59129, 42559, 575, 13387, 2747, 31731, 26373, 32354, 30546, 2578, -45752, -127, 36011, 668, -204, 37553, 427, 1517, -15494, 12457, 41750, 38047, -19626, 26011, 44423, 19644, -2382, 14901, -7627, -51027, 8887, 98743, 28324, 817, 56156, 46, 118342, -27595, 13982, -28258, 1830, 93171, -791, 72929, 700, -22965, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 8.1480982771608979e-05, 7.3473711381666362e-05, 0.0002507854369468987, 0.00011460873065516353, 0.0001250575587619096, 0.00019671428890433162, 0.00013530354772228748, 5.9636069636326283e-05, 8.4881954535376281e-05, 3.2635500247124583e-05, 8.2381098764017224e-05, 3.5910703445551917e-05, 0.00018315887427888811, 0.005541567225009203, 7.0603869971819222e-05, 0.00020909997692797333, 0.0027484172023832798, 2.0643587049562484e-05, 0.0001029203413054347, 0.00015958845324348658, 0.00012007846817141399, 0.00015133775013964623, 0.00014621474838349968, 3.8277903513517231e-05, 8.8784705440048128e-05, 0.00010684208245947957, 3.5644774470711127e-05, 6.5258675022050738e-05, 0.00026498083025217056, 4.9484231567475945e-05, 4.3070253013866022e-05, 0.00020479227532632649, 0.00026677350979298353, 1.3806723472953308e-05, 8.497872477164492e-05, 0.00024080211005639285, 1.6895608496270142e-05, 0.00045806824346072972, 3.9344682591035962e-05, 9.9973862234037369e-05, 5.9034995501860976e-05, 0.00027414411306381226, 0.00011450327292550355, 1.1750750672945287e-05, 0.00016020600742194802, 8.3631493907887489e-05, 0.00020575072267092764, 0.00013928230328019708, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[8*1*1*48] = { 
  /* [0][0][][] */ -8,3,9,-94,9,25,4,8,2,8,5,-5,102,0,5,5,0,-5,-7,-2,81,0,2,7,32,37,16,13,4,6,5,-127,12,11,-3,-2,-24,1,-16,33,5,-24,-9,8,5,0,3,3, 
  /* [1][0][][] */ -37,-11,-1,-3,45,28,-25,76,21,0,-29,-20,15,0,20,36,0,39,20,-48,2,23,127,17,-28,-4,54,2,20,0,16,-8,14,-8,-8,-22,5,-54,8,3,-7,-7,-75,-11,-37,5,-47,-94, 
  /* [2][0][][] */ -56,18,5,12,41,-9,32,24,-10,57,10,-5,1,0,6,56,0,12,-127,22,-2,13,9,-18,-32,5,37,6,9,29,25,2,3,-7,-13,-12,15,7,9,-4,36,-10,-26,1,20,-56,20,16, 
  /* [3][0][][] */ 3,2,-2,11,-6,26,4,-2,66,21,-7,-3,28,0,-30,-11,0,-2,-10,4,-4,2,7,-18,-14,-4,-11,-6,-6,-2,0,-8,-49,46,-56,2,4,1,8,-127,0,7,3,-48,3,0,-1,6, 
  /* [4][0][][] */ -4,-4,75,35,7,-23,1,-4,6,-9,2,-9,-83,0,-11,4,0,8,8,-1,63,0,2,-6,-16,30,-5,45,-4,1,1,95,2,2,2,0,18,-13,-10,-17,-3,-127,6,-2,0,-4,3,2, 
  /* [5][0][][] */ -6,44,4,-7,5,47,26,15,-19,29,7,53,26,0,-127,-3,0,14,-40,19,-10,10,-13,44,-20,-2,29,0,-15,21,22,-17,49,31,-38,-4,4,15,-46,16,24,-13,-9,29,20,61,20,23, 
  /* [6][0][][] */ -21,-55,1,5,37,-41,-24,9,23,-22,-16,90,-2,0,-127,37,0,-9,46,-20,-4,4,25,-32,30,-2,-3,-13,43,-13,-10,-1,91,-30,26,-4,-6,-6,-69,-22,-16,-14,-6,-27,-18,-83,-17,-30, 
  /* [7][0][][] */ -111,-25,-10,10,127,24,62,26,14,7,22,-27,-24,0,88,102,0,14,-1,58,-9,-3,-30,44,18,3,45,6,49,60,57,-4,-14,-22,-16,-27,4,24,25,39,72,5,-28,-7,59,5,67,73, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant12_scale = { 8, { 0.046016186475753784, 0.027951987460255623, 0.053269587457180023, 0.054722703993320465, 0.10319293290376663, 0.043096881359815598, 0.03521529957652092, 0.034572266042232513, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[8] = { -8342, -24541, 22044, 19657, 4270, -561, 37960, 7795, };
const TfArray<1, int> tensor_dimension13 = { 1, { 8 } };
const TfArray<8, float> quant13_scale = { 8, { 0.0010827338555827737, 0.0006576938321813941, 0.0012534020934253931, 0.0012875930406153202, 0.0024280690122395754, 0.0010140442755073309, 0.00082859530812129378, 0.00081346509978175163, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[48*1*1*8] = { 
  /* [0][0][][] */ 67,32,3,-6,127,26,-53,-29, 
  /* [1][0][][] */ -5,-1,2,127,5,-4,1,13, 
  /* [2][0][][] */ 23,-127,-14,33,-14,-71,77,24, 
  /* [3][0][][] */ 127,-24,-11,24,-1,-32,37,5, 
  /* [4][0][][] */ 11,-51,127,-7,-1,-54,4,-101, 
  /* [5][0][][] */ 74,-2,12,-2,127,16,-14,12, 
  /* [6][0][][] */ -23,91,-31,127,37,54,-80,-75, 
  /* [7][0][][] */ -4,127,-6,8,3,-17,18,-5, 
  /* [8][0][][] */ 127,43,-9,1,-50,-33,-2,-35, 
  /* [9][0][][] */ -127,21,4,19,49,10,-2,-3, 
  /* [10][0][][] */ -68,-6,21,127,36,33,-24,-15, 
  /* [11][0][][] */ -127,11,17,-62,39,9,-17,-49, 
  /* [12][0][][] */ 127,28,2,18,-47,-11,-1,-46, 
  /* [13][0][][] */ -6,79,-127,-11,1,106,-73,74, 
  /* [14][0][][] */ -70,-29,-16,127,18,6,-12,-29, 
  /* [15][0][][] */ -5,127,1,-3,0,-19,13,-51, 
  /* [16][0][][] */ -3,-127,-22,11,-10,-119,125,-35, 
  /* [17][0][][] */ 18,127,-1,-9,4,70,-80,-18, 
  /* [18][0][][] */ -2,42,-127,2,19,56,-34,69, 
  /* [19][0][][] */ -94,19,16,14,-127,5,18,17, 
  /* [20][0][][] */ -127,-29,-2,-4,74,-29,28,-8, 
  /* [21][0][][] */ -57,-6,0,3,-127,-1,12,3, 
  /* [22][0][][] */ -127,-21,-2,-2,73,-13,33,51, 
  /* [23][0][][] */ -16,-24,-6,-7,-1,76,-127,-82, 
  /* [24][0][][] */ -8,42,-127,-2,6,49,-21,76, 
  /* [25][0][][] */ 115,-45,5,127,-86,-6,7,-65, 
  /* [26][0][][] */ 6,-22,-3,3,-13,127,125,-31, 
  /* [27][0][][] */ 70,-12,0,25,127,30,35,-23, 
  /* [28][0][][] */ -5,127,-60,2,6,80,-30,119, 
  /* [29][0][][] */ -6,16,-8,-6,-5,82,-127,-91, 
  /* [30][0][][] */ 4,-6,2,-127,-4,0,-4,-11, 
  /* [31][0][][] */ -73,5,2,13,-127,15,20,-11, 
  /* [32][0][][] */ -9,22,9,-127,-5,29,-84,-96, 
  /* [33][0][][] */ -60,-10,-3,3,-127,43,37,-4, 
  /* [34][0][][] */ -127,82,12,31,40,-22,11,11, 
  /* [35][0][][] */ -12,127,-27,-7,2,-94,80,-34, 
  /* [36][0][][] */ -12,40,1,-28,4,104,-127,-26, 
  /* [37][0][][] */ 23,-69,-13,26,22,-127,113,-17, 
  /* [38][0][][] */ 37,-127,19,16,19,71,-56,75, 
  /* [39][0][][] */ -1,-127,-13,-7,-4,-18,-45,-88, 
  /* [40][0][][] */ 127,40,-9,2,-53,84,-124,-92, 
  /* [41][0][][] */ 12,-123,17,2,2,92,-67,127, 
  /* [42][0][][] */ 44,5,5,-127,-52,-4,-16,-41, 
  /* [43][0][][] */ -79,-32,15,-127,45,5,-21,-6, 
  /* [44][0][][] */ -9,-15,-2,16,-23,83,127,-10, 
  /* [45][0][][] */ -127,-32,-9,-3,13,5,34,-22, 
  /* [46][0][][] */ 18,68,127,5,-10,7,14,20, 
  /* [47][0][][] */ 2,1,19,127,-3,-4,-1,7, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 0.00022426329087466002, 0.00074507761746644974, 0.00060970161575824022, 0.0011283920612186193, 0.0035398073960095644, 0.0013225984293967485, 0.0023552896454930305, 0.0027517147827893496, 0.0013985146069899201, 0.0015162208583205938, 0.0016018776223063469, 0.0013023390201851726, 0.0011617838172242045, 0.0013742976589128375, 0.0012904423056170344, 0.0044326339848339558, 0.00074936851160600781, 0.00090480985818430781, 0.0051164655014872551, 0.00027136979042552412, 0.00062660576077178121, 0.00099584960844367743, 0.0010331505909562111, 0.0023539245594292879, 0.00084708444774150848, 0.00048617995344102383, 0.00043938474846072495, 0.0010356379207223654, 0.0019674638751894236, 0.0023566726595163345, 0.0013100052019581199, 0.0010032764403149486, 0.0025318772532045841, 0.00059113447787240148, 0.00087280798470601439, 0.00059436727315187454, 0.0012434913078323007, 0.00069942564005032182, 0.00025629391893744469, 0.0052575124427676201, 0.0013482784852385521, 0.0024473951198160648, 0.00095876702107489109, 0.0010413990821689367, 0.0007356379646807909, 0.0011448991717770696, 0.0019552342128008604, 0.0024880643468350172, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[48] = { 51349, 8210, 6831, 7538, 1703, 10148, -2216, -277, 1134, 2360, 3796, 252, 2269, -935, 929, -2213, 5801, 12516, -264, 26712, 5195, 2654, 10242, -624, 3873, 6480, 24623, 9394, -82, -2989, 104, 2251, -2095, 10021, 3210, 8408, 7829, 5242, 24354, 2323, -1185, 3064, 1443, 3852, 4425, 2532, -1558, 2836, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 8.3736427768599242e-05, 0.0002782004012260586, 0.00022765311587136239, 0.00042132407543249428, 0.0013217091327533126, 0.00049383769510313869, 0.00087942858226597309, 0.0010274476371705532, 0.00052218366181477904, 0.00056613335618749261, 0.00059811625396832824, 0.00048627317300997674, 0.00043379203998483717, 0.00051314139273017645, 0.00048183111357502639, 0.0016550767468288541, 0.00027980256709270179, 0.00033784194965846837, 0.0019104088423773646, 0.00010132526949746534, 0.00023396486358251423, 0.00037183478707447648, 0.00038576239603571594, 0.00087891891598701477, 0.00031628817669115961, 0.00018153204291593283, 0.00016405944188591093, 0.00038669112836942077, 0.00073462049476802349, 0.00087994500063359737, 0.00048913562204688787, 0.00037460785824805498, 0.00094536365941166878, 0.00022072043793741614, 0.00032589296461082995, 0.00022192751930560917, 0.00046430036309175193, 0.00026115466607734561, 9.5696173957549036e-05, 0.0019630736205726862, 0.00050342624308541417, 0.00091381935635581613, 0.00035798872704617679, 0.00038884225068613887, 0.00027467578183859587, 0.00042748756823129952, 0.00073005410376936197, 0.00092900462914258242, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[1*3*3*48] = { 
  /* [0][0][][] */ 4,-2,21,109,3,82,0,28,15,8,10,8,-7,-9,-46,9,-2,8,-25,-114,-7,-23,127,-9,-3,5,-5,9,-5,4,17,98,20,28,38,-28,2,35,-1,2,18,-67,-9,-9,16,2,-7,-10, 127,9,15,-127,27,88,11,11,122,127,7,43,-50,-24,5,7,127,-56,-59,-56,-101,24,-108,15,17,70,-31,-83,23,21,9,-123,6,-62,127,10,-39,-47,-5,118,-78,-99,-29,3,-35,-8,-127,23, -31,-3,8,15,-1,66,5,17,26,8,-15,31,-14,-3,15,3,-103,29,-2,80,-32,-12,-17,-6,-4,-58,-3,29,-17,5,4,-22,8,-24,16,-20,0,48,40,-12,50,38,-14,10,-43,3,-2,-6, 
  /* [0][1][][] */ 125,7,1,-98,13,-27,37,-16,8,9,-13,54,-5,-1,18,-32,0,-50,-61,-86,10,-72,-124,-18,5,97,-15,-127,-9,32,13,-107,17,-53,-2,127,-2,59,-40,41,-61,-127,38,-88,-44,-14,-12,-5, 27,-127,-127,115,-127,-127,-127,-127,-127,-96,127,-127,127,127,35,-127,-83,127,127,-108,127,127,112,127,127,-127,-127,28,-127,-127,93,127,-127,127,-29,-42,127,-127,127,127,127,-82,127,127,127,-121,103,106, 54,5,49,-14,5,-61,45,18,-24,15,-106,-7,1,-40,127,4,63,-66,-73,87,13,-45,11,-33,1,6,-38,69,20,40,0,3,32,-44,9,67,-5,65,66,-11,-80,7,-83,-31,26,-16,-12,5, 
  /* [0][2][][] */ -52,-6,26,-16,7,35,-36,23,7,-23,11,33,8,-6,-39,18,5,21,-15,107,6,-32,-16,-12,-2,21,0,51,-11,3,47,-32,-18,-44,-32,-40,-1,31,9,-22,10,-4,41,-37,-35,17,-11,17, 68,125,75,22,16,-20,126,35,17,-2,43,27,-4,-1,-90,25,-58,-57,-38,125,-37,48,12,20,32,-64,-40,29,76,1,127,22,85,-27,7,-37,-25,-17,-12,119,-27,-12,-39,45,20,-32,7,-127, -41,-3,7,-4,4,-5,-61,8,-19,-10,-40,-40,20,-9,-10,12,33,23,-10,-127,24,-11,5,-9,-7,10,-10,-55,-15,8,6,9,-20,87,-37,-23,-5,37,25,-62,5,7,-37,7,-43,127,-5,-3, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.013642502017319202, 0.011140818707644939, 0.0079040108248591423, 0.007870127446949482, 0.0049842717126011848, 0.0039763706736266613, 0.021197972819209099, 0.005441863089799881, 0.0058412211947143078, 0.0059683485887944698, 0.0034071276895701885, 0.0061436016112565994, 0.011472403071820736, 0.0086143501102924347, 0.0038247264456003904, 0.0065286215394735336, 0.0083210300654172897, 0.0090095018967986107, 0.0025828620418906212, 0.0063326219096779823, 0.009131772443652153, 0.0053995102643966675, 0.0075724232010543346, 0.0056501096114516258, 0.0074078934267163277, 0.005499464925378561, 0.035482846200466156, 0.0037286027800291777, 0.0075238174758851528, 0.022780498489737511, 0.004523702897131443, 0.0064018792472779751, 0.025526160374283791, 0.0065601612441241741, 0.008050575852394104, 0.006928861141204834, 0.014355942606925964, 0.0065657463856041431, 0.011290025897324085, 0.00073105923365801573, 0.0056186453439295292, 0.002437094459310174, 0.00628642737865448, 0.0051410133019089699, 0.0064202104695141315, 0.0040971487760543823, 0.0073796557262539864, 0.0041916514746844769, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 3 };
const ALIGN(16) int32_t tensor_data17[48] = { -52587, -299, 8459, -412, 6121, -6692, 2047, 27075, 1831, 34766, -2110, 29732, -6891, -1086, 27578, 10373, 184, 18842, 38383, 10629, 42, -678, 100, 15940, -8256, 28685, 45195, 38188, 3855, 1548, -895, 876, 1454, 18526, -6860, 15456, -11300, 15531, -22298, 157042, 24280, 23491, 10728, -1505, 15482, 3134, 1882, 524, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.00032100005773827434, 0.00026213692035526037, 0.00018597672169562429, 0.00018517946591600776, 0.0001172769843833521, 9.3561662652064115e-05, 0.00049877585843205452, 0.00012804384459741414, 0.00013744049647357315, 0.00014043172996025532, 8.0167708802036941e-05, 0.0001445553352823481, 0.0002699389006011188, 0.00020269060041755438, 8.9993562141899019e-05, 0.00015361463010776788, 0.000195788947166875, 0.00021198828471824527, 6.0773225413868204e-05, 0.00014900286623742431, 0.00021486524201463908, 0.00012704730033874512, 0.00017817466869018972, 0.00013294375094119459, 0.0001743033790262416, 0.00012939918087795377, 0.0008348905248567462, 8.7731830717530102e-05, 0.00017703100456856191, 0.00053601176477968693, 0.00010644007124938071, 0.00015063246246427298, 0.0006006155745126307, 0.0001543567341286689, 0.00018942532187793404, 0.00016303203301504254, 0.00033778688521124423, 0.00015448815247509629, 0.0002656476863194257, 1.7201393347932026e-05, 0.00013220342225395143, 5.7343400840181857e-05, 0.00014791594003327191, 0.0001209650217788294, 0.00015106378123164177, 9.6403498901054263e-05, 0.00017363896768074483, 9.8627097031567246e-05, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[8*1*1*48] = { 
  /* [0][0][][] */ -48,-8,-42,16,2,-21,12,1,-106,125,-36,114,127,5,64,-26,-8,-33,6,14,-12,-1,-23,-26,22,-97,15,66,-26,17,16,-36,1,-71,117,22,7,-12,-8,-14,105,-8,43,-25,-27,18,-26,-28, 
  /* [1][0][][] */ -5,36,127,5,1,-26,5,-81,33,-7,27,1,-24,7,-7,-119,14,-55,12,4,-23,30,27,-32,-14,-10,13,2,11,-7,13,1,-7,8,22,18,-17,-30,67,-57,13,40,-15,29,-16,8,22,-7, 
  /* [2][0][][] */ 6,-47,15,-39,32,28,-5,-29,4,-5,-3,17,-10,57,5,-1,-41,127,-25,-30,-9,18,-39,-11,118,-1,3,-6,-30,-8,5,-38,-9,-15,4,14,-11,-3,-16,8,16,-24,-18,-1,3,20,-25,-39, 
  /* [3][0][][] */ -6,-91,0,7,4,-8,-15,2,-5,-12,16,24,7,-6,56,3,-7,-18,5,17,-6,20,-24,6,6,51,4,8,-6,10,127,-1,11,3,-3,-3,-22,-10,-4,10,-12,10,-8,22,-9,-2,-1,37, 
  /* [4][0][][] */ -100,8,5,5,6,-38,-4,3,39,-39,23,-20,-32,2,-11,-7,4,10,-7,23,11,-24,15,0,-4,40,7,108,6,1,-7,-24,-4,-127,-32,14,1,0,5,-3,-44,-2,-8,18,-59,5,3,10, 
  /* [5][0][][] */ -20,30,21,6,-56,12,1,44,27,-2,13,0,-5,-51,0,28,-2,-86,24,9,42,-47,7,45,7,9,-78,-42,-41,-32,19,-4,-2,-66,0,-74,72,11,-51,17,24,-46,-9,8,127,-10,-51,-7, 
  /* [6][0][][] */ -25,-27,-15,-7,34,-23,-6,-31,-5,-6,35,-17,-2,40,-9,-56,-4,3,1,-17,-27,50,-7,-77,3,-9,-52,-59,28,36,-12,1,2,-53,-15,64,-66,-53,4,-49,-8,5,14,38,127,-31,45,11, 
  /* [7][0][][] */ 18,36,-80,30,-29,16,8,66,-8,-2,62,-27,14,-34,-9,1,-19,-127,43,-37,60,42,13,-60,18,-23,23,5,-22,29,-13,3,6,38,2,-31,-7,-59,-43,-65,-15,-32,40,64,-32,-23,-9,-2, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant18_scale = { 8, { 0.0189099982380867, 0.028700124472379684, 0.065610580146312714, 0.066484808921813965, 0.037466838955879211, 0.0260205939412117, 0.028327835723757744, 0.041740864515304565, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int32_t tensor_data19[8] = { -39495, 25877, -12582, -14370, 19675, 1020, 31089, 42753, };
const TfArray<1, int> tensor_dimension19 = { 1, { 8 } };
const TfArray<8, float> quant19_scale = { 8, { 0.00044494113535620272, 0.00067529705120250583, 0.0015437783440575004, 0.0015643484657630324, 0.00088157271966338158, 0.00061224930686876178, 0.0006665373221039772, 0.00098213797900825739, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ -127,-4,-3,85,-37,41,26,-29, 
  /* [1][0][][] */ 26,59,46,8,8,-35,89,127, 
  /* [2][0][][] */ -41,-1,-5,0,-127,-17,19,1, 
  /* [3][0][][] */ 93,-1,-12,-114,-127,22,33,-19, 
  /* [4][0][][] */ -127,37,-10,-12,70,-19,50,29, 
  /* [5][0][][] */ -99,-28,19,-9,-127,8,11,83, 
  /* [6][0][][] */ -19,-127,22,-5,3,-17,3,56, 
  /* [7][0][][] */ -69,-3,8,101,127,-37,-32,6, 
  /* [8][0][][] */ 78,9,-5,-127,-3,-24,-36,-37, 
  /* [9][0][][] */ 7,-127,-4,-2,9,79,-49,86, 
  /* [10][0][][] */ -84,4,-9,13,-127,66,61,-14, 
  /* [11][0][][] */ 115,16,49,9,-62,-41,-39,-127, 
  /* [12][0][][] */ -2,13,38,-9,6,-76,127,64, 
  /* [13][0][][] */ 67,-17,2,-15,115,127,127,-48, 
  /* [14][0][][] */ 127,58,-22,26,-102,-30,-8,8, 
  /* [15][0][][] */ -16,-127,12,0,7,3,6,32, 
  /* [16][0][][] */ -40,-22,8,-1,-127,-1,10,10, 
  /* [17][0][][] */ -29,95,-111,4,17,-127,106,-81, 
  /* [18][0][][] */ 127,-25,-41,12,-62,30,9,103, 
  /* [19][0][][] */ 127,-67,-27,-10,51,1,26,7, 
  /* [20][0][][] */ 124,27,-9,127,-10,21,1,-60, 
  /* [21][0][][] */ 3,34,-64,2,-6,104,-127,-85, 
  /* [22][0][][] */ -127,26,24,-11,-37,14,-54,-40, 
  /* [23][0][][] */ -43,-57,4,23,-127,65,73,-18, 
  /* [24][0][][] */ 127,5,-2,-7,-92,-22,4,11, 
  /* [25][0][][] */ 23,-9,0,-22,127,51,51,-34, 
  /* [26][0][][] */ 11,-94,14,-55,6,-127,77,-49, 
  /* [27][0][][] */ -15,-127,25,-12,-4,-52,32,-11, 
  /* [28][0][][] */ -95,30,-36,30,-23,-17,127,57, 
  /* [29][0][][] */ -13,42,16,3,2,39,-96,-127, 
  /* [30][0][][] */ 127,-55,-25,13,-87,16,-43,-27, 
  /* [31][0][][] */ 7,-30,76,-17,19,-116,127,65, 
  /* [32][0][][] */ -77,27,6,12,-127,-106,-103,66, 
  /* [33][0][][] */ -27,14,3,24,-127,-60,-43,19, 
  /* [34][0][][] */ 7,-127,42,-10,-9,91,-77,58, 
  /* [35][0][][] */ -23,-51,-127,-8,-4,-71,50,-59, 
  /* [36][0][][] */ 2,127,61,11,-4,6,-18,-40, 
  /* [37][0][][] */ -127,35,44,-17,59,-38,-5,-112, 
  /* [38][0][][] */ -127,-15,-49,-12,39,18,34,109, 
  /* [39][0][][] */ -2,-24,73,-7,15,-61,127,70, 
  /* [40][0][][] */ -35,-12,-2,-39,-122,108,127,-34, 
  /* [41][0][][] */ -127,45,7,-71,-77,-94,-87,51, 
  /* [42][0][][] */ -34,-121,-96,-12,-16,62,-127,-90, 
  /* [43][0][][] */ -72,11,-9,-127,96,57,70,2, 
  /* [44][0][][] */ 127,-18,13,-89,21,-34,-14,51, 
  /* [45][0][][] */ -17,-127,-7,-4,-16,-76,81,14, 
  /* [46][0][][] */ 114,-2,-4,-29,127,-42,-29,5, 
  /* [47][0][][] */ 127,2,14,111,-10,26,0,-53, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.00060693244449794292, 0.0016734461532905698, 0.00046381214633584023, 0.00055260001681745052, 0.00041781453182920814, 0.0004469655395951122, 0.00076671858550980687, 0.00041185165173374116, 0.00060585368191823363, 0.0014149738708510995, 0.0015701068332418799, 0.00049255607882514596, 0.00068487186217680573, 0.0015395957743749022, 0.00027411809423938394, 0.00080818409333005548, 0.00044656288810074329, 0.00062251259805634618, 0.00047690130304545164, 0.00055309897288680077, 0.00057680276222527027, 0.00043687189463526011, 0.00070733629399910569, 0.00024974011466838419, 0.00051537278341129422, 0.00059905200032517314, 0.0028789034113287926, 0.00080438057193532586, 0.00040580116910859942, 0.00085494917584583163, 0.00048212037654593587, 0.00037625557160936296, 0.0014407776761800051, 0.00049751147162169218, 0.0013244660804048181, 0.00084852438885718584, 0.001356659340672195, 0.00066202203743159771, 0.00041990945464931428, 0.00073621910996735096, 0.00029711582465097308, 0.00046624281094409525, 0.00055734260240569711, 0.00054735183948650956, 0.0031133461743593216, 0.00068465038202702999, 0.00049557304009795189, 0.0019385020714253187, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[48] = { 702, 776, 2177, 492, 9583, 16432, 2756, -133, -1009, -563, 1194, 1172, 3423, 893, 23794, 2773, 2062, -1032, -223, 2981, -1911, 10566, 9443, 11407, 5671, 251, 4383, 4198, 7708, -504, 9850, 5874, 486, -213, 5138, 3858, -1936, 224, -593, 4649, 1194, -474, -1006, -43, 1145, 3690, 897, 1121, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.00033336787601001561, 0.00091916852397844195, 0.00025475665461272001, 0.00030352489557117224, 0.0002294916776008904, 0.00024550335365347564, 0.00042113312520086765, 0.00022621646348852664, 0.00033277535112574697, 0.00077719829278066754, 0.00086240767268463969, 0.00027054472593590617, 0.00037617742782458663, 0.00084564893040806055, 0.00015056399570312351, 0.00044390876428224146, 0.00024528219364583492, 0.00034192553721368313, 0.00026194608653895557, 0.00030379893723875284, 0.00031681865220889449, 0.00023995926312636584, 0.00038851640420034528, 0.00013717397814616561, 0.00028307718457654119, 0.00032903940882533789, 0.0015812863130122423, 0.00044181960402056575, 0.00022289314074441791, 0.00046959525207057595, 0.00026481275563128293, 0.00020666472846642137, 0.00079137145075947046, 0.00027326657436788082, 0.00072748534148558974, 0.00046606632531620562, 0.00074516801396384835, 0.00036362677928991616, 0.00023064235574565828, 0.00040438075666315854, 0.00016319588758051395, 0.00025609173462726176, 0.00030612983391620219, 0.00030064224847592413, 0.001710057957097888, 0.00037605577381327748, 0.00027220186893828213, 0.0010647550225257874, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[1*3*3*48] = { 
  /* [0][0][][] */ 69,-92,98,70,55,-33,107,-66,62,-87,-82,49,51,-40,-72,-90,101,80,48,80,67,-75,-83,53,-30,-39,-66,-63,-67,62,-64,-113,-16,39,68,64,-64,52,-51,-22,51,-74,59,62,-97,10,73,-31, 82,-94,127,85,-79,-69,-59,-85,99,-100,-62,74,78,-109,-96,91,-39,96,83,127,84,-118,53,71,-52,-77,-69,-81,53,79,-30,-127,-83,79,81,83,-81,83,-82,-15,76,-95,81,89,-77,-127,92,-100, 36,-46,69,36,19,-41,-49,-39,42,-30,8,34,28,-78,-55,-1,-55,36,34,71,36,-56,33,26,-26,-45,-42,-23,31,30,89,-88,-82,45,35,35,-29,40,-38,-9,39,-40,34,41,-2,-9,37,-75, 
  /* [0][1][][] */ 93,-112,-42,94,56,-83,127,-90,88,-113,-70,83,83,-113,-13,-127,127,106,74,-39,84,108,-127,73,72,-77,-94,-99,-127,87,-70,-9,-82,70,106,95,-84,80,-81,89,85,-100,87,89,-93,108,94,-92, 127,-127,-65,127,-127,-127,-93,-127,127,-127,-127,127,127,-127,-23,98,-66,127,127,-52,127,127,70,127,127,-127,-127,-127,53,127,-28,14,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-10,127,-127, 62,-77,-35,66,38,-62,-48,-63,56,-41,-60,59,46,-55,-16,12,-60,52,57,-28,58,64,52,66,66,-64,-63,-45,35,54,127,16,-59,67,49,49,-47,58,-60,56,61,-58,53,61,-64,-68,57,-58, 
  /* [0][2][][] */ 44,-49,-47,50,28,-53,64,-43,41,-73,-5,40,56,-74,83,-78,73,49,34,-32,25,-12,-77,31,-22,-44,-47,-50,-73,31,-41,89,-72,36,49,43,-26,37,-42,-86,49,-51,40,45,-23,15,39,-73, 71,-70,-48,81,-55,-64,-73,-69,52,-80,-65,61,75,-51,127,33,-46,57,61,-43,56,-19,42,68,-48,-67,-78,-61,32,62,-23,115,-54,63,55,58,-49,62,-65,-105,68,-65,59,61,-90,50,62,-51, 42,-39,-26,46,30,-20,-17,-34,15,-27,-51,26,30,3,67,25,-36,23,28,-31,28,-1,40,42,-24,-30,-48,-23,33,34,63,68,0,35,16,22,-22,29,-30,-53,28,-32,25,29,-64,8,31,-4, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.0030718191992491484, 0.0015124939382076263, 0.010092303156852722, 0.001933662686496973, 0.0059921648353338242, 0.0038374909199774265, 0.0065466812811791897, 0.0053572971373796463, 0.0039520827122032642, 0.0017513601342216134, 0.002368254354223609, 0.0041619231924414635, 0.0018173310672864318, 0.0016270604683086276, 0.0069416593760251999, 0.0081240367144346237, 0.0093489494174718857, 0.002308837603777647, 0.0052583175711333752, 0.006482626311480999, 0.0038458839990198612, 0.0086676515638828278, 0.0038208230398595333, 0.0083754453808069229, 0.0041754809208214283, 0.0049757631495594978, 0.00093923573149368167, 0.0027863287832587957, 0.0050425599329173565, 0.0038805797230452299, 0.0044640712440013885, 0.0065019433386623859, 0.0023183219600468874, 0.0059633729979395866, 0.0011660400778055191, 0.002096773823723197, 0.0046318159438669682, 0.0040801740251481533, 0.0044652484357357025, 0.0040316511876881123, 0.004574999213218689, 0.0039368015713989735, 0.0038234826643019915, 0.0038726869970560074, 0.001838990836404264, 0.0071492753922939301, 0.0053828074596822262, 0.0014367456315085292, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const ALIGN(16) int32_t tensor_data23[48] = { 4471, 37525, -628, 53068, 3024, 117037, -1916, 46463, 2823, 31677, 24998, 922, 1153, 32312, -128, -2143, 44, 1584, 1483, -2309, 128, -2028, -1539, -25576, -5855, 38878, 122393, 105092, 3283, 5414, -1735, 926, 24698, 579, 40521, 5323, 52857, 742, 54961, 1619, 1154, 63512, -765, 3107, 57908, -22, -846, 50072, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 7.2278096922673285e-05, 3.5588094760896638e-05, 0.00023746596707496792, 4.5497945393435657e-05, 0.0001409921096637845, 9.0293906396254897e-05, 0.00015403956058435142, 0.00012605405936483294, 9.2990179837215692e-05, 4.1208473703591153e-05, 5.5723634432069957e-05, 9.7927608294412494e-05, 4.2760730138979852e-05, 3.8283775211311877e-05, 0.00016333317034877837, 0.00019115381292067468, 0.00021997527801431715, 5.4325591918313876e-05, 0.00012372512719593942, 0.00015253238962031901, 9.0491390437819064e-05, 0.00020394474267959595, 8.9901717728935182e-05, 0.00019706931198015809, 9.8246615380048752e-05, 0.00011707677913364023, 2.2099664420238696e-05, 6.556067819474265e-05, 0.00011864847328979522, 9.1307760158088058e-05, 0.00010503697558306158, 0.00015298690414056182, 5.4548752814298496e-05, 0.00014031465980224311, 2.7436237360234372e-05, 4.9335856601828709e-05, 0.00010898390610236675, 9.6004099759738892e-05, 0.00010506466787774116, 9.4862385594751686e-05, 0.00010764704347820953, 9.2630623839795589e-05, 8.9964298240374774e-05, 9.112204861594364e-05, 4.327037459006533e-05, 0.00016821824829094112, 0.00012665429676417261, 3.3805779821705073e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[16*1*1*48] = { 
  /* [0][0][][] */ -18,2,-26,4,26,1,5,107,-55,15,47,-5,13,-15,-16,19,11,-17,-16,-2,61,-12,18,125,-16,93,-5,-12,35,-12,25,-22,-16,49,24,-48,16,44,20,-14,-113,-24,23,42,39,34,-127,-48, 
  /* [1][0][][] */ -39,-10,15,13,-35,16,-4,57,-53,-28,9,-41,-21,-13,-3,1,-26,119,-12,11,10,6,-29,-19,29,-39,17,24,-21,-87,-42,26,-13,-10,29,-1,2,-44,3,22,-19,-27,127,7,8,1,28,-17, 
  /* [2][0][][] */ -21,-6,-18,-35,2,-68,5,-21,0,9,19,26,12,14,-14,12,-9,-24,-22,-11,-7,-3,-3,-127,-10,77,-17,4,-3,-19,0,-9,-8,60,14,1,29,9,28,3,-37,3,-19,-8,-2,-7,16,10, 
  /* [3][0][][] */ -6,33,-2,-35,0,0,2,-5,-20,-1,1,36,-127,7,-9,-3,4,11,-21,-3,-34,10,4,15,-7,-14,2,24,-9,23,5,16,6,0,14,20,-13,31,45,9,8,6,26,-30,8,-6,6,18, 
  /* [4][0][][] */ 32,-31,6,7,19,28,25,-20,-31,1,-9,-20,-2,9,1,14,20,-10,-80,6,-8,10,9,67,3,-23,6,49,7,-72,21,12,11,-35,34,-127,11,33,1,17,-24,18,9,-25,-15,-19,8,6, 
  /* [5][0][][] */ 32,4,-25,61,-1,-8,9,26,-3,-7,42,9,-1,55,-1,4,-27,17,32,8,11,0,6,-23,-2,-50,2,-20,-3,-7,4,5,66,-127,6,31,-11,-14,15,6,-95,59,20,-8,-7,3,-109,-7, 
  /* [6][0][][] */ 23,-3,9,7,-16,-3,3,-14,-5,6,0,8,-18,8,9,5,-2,-13,127,5,7,14,14,-35,5,3,29,-10,-9,-4,-3,4,1,-10,31,-38,-1,-47,68,12,2,-8,-8,8,-8,3,5,-10, 
  /* [7][0][][] */ -43,-10,-10,35,-14,79,-5,45,0,29,-8,127,73,-2,-10,-8,-9,-25,-9,-21,-27,-9,-17,66,8,-37,-42,-25,-7,-10,-15,-12,8,-1,-20,2,8,-59,92,0,25,27,-63,-58,22,-6,1,5, 
  /* [8][0][][] */ -51,-54,-4,1,-11,0,1,30,-7,-85,3,39,52,2,12,14,-14,62,-28,12,-50,21,-3,-12,4,1,2,41,-4,110,-9,27,-8,3,-16,-127,-122,69,29,37,22,-7,113,-21,8,34,21,33, 
  /* [9][0][][] */ -23,3,-8,25,18,-38,-9,-1,61,-37,10,51,-59,8,17,-7,-5,14,-39,-22,50,4,-13,-16,-8,10,51,-23,15,15,5,3,-7,18,78,-106,-7,-127,-92,5,-30,27,61,11,5,4,-14,-39, 
  /* [10][0][][] */ -22,-11,-28,-127,41,84,6,-14,-3,31,21,11,47,-44,-32,31,33,-43,52,-40,30,-24,35,53,-54,-103,5,-32,53,36,52,-46,-33,-80,26,-4,18,-44,3,-35,-34,-68,-11,11,7,12,15,-37, 
  /* [11][0][][] */ 1,54,-11,67,30,-66,-71,-17,2,57,-17,2,-14,61,7,-72,20,40,10,-4,-53,-110,15,6,15,-36,16,-14,56,-43,22,-78,44,-11,-34,-89,97,11,1,-127,5,63,98,-71,-5,-47,29,35, 
  /* [12][0][][] */ 127,-1,-7,13,8,18,6,100,22,-14,-60,-19,-3,14,-7,3,-5,6,-9,-6,6,-2,5,21,-3,15,-8,5,-5,18,-2,3,1,-69,-8,14,-16,-19,-32,-7,-19,-77,7,-127,-66,-10,81,-4, 
  /* [13][0][][] */ 10,1,-2,4,9,-12,1,-1,1,4,6,21,-3,4,8,-1,7,4,10,4,9,-11,8,-4,1,2,18,127,11,-2,9,-2,4,-1,-39,20,7,-3,3,-13,-14,-4,3,5,-2,-3,-8,-12, 
  /* [14][0][][] */ 60,-25,39,-72,49,27,36,-97,-53,-54,-4,115,-68,-5,60,1,56,25,-52,66,14,10,76,-18,21,60,-38,-121,21,-34,52,50,-8,66,-127,-52,-37,50,95,8,-41,13,55,-3,-6,-3,14,-35, 
  /* [15][0][][] */ -8,-48,-78,-33,59,30,71,-44,-1,28,-12,-33,77,18,-101,48,61,51,75,-78,-105,-13,58,-18,-95,44,29,53,54,54,35,-46,25,58,96,127,-11,-112,-6,-36,87,61,115,-54,-7,-36,-11,65, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant24_scale = { 16, { 0.026373190805315971, 0.037874732166528702, 0.045603182166814804, 0.04468449205160141, 0.043564818799495697, 0.048389267176389694, 0.039053089916706085, 0.023429388180375099, 0.026213003322482109, 0.024936536327004433, 0.037463877350091934, 0.024578006938099861, 0.040594693273305893, 0.052688311785459518, 0.023165756836533546, 0.029130822047591209, } };
const TfArray<16, int> quant24_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int32_t tensor_data25[16] = { -39464, 494, -456, -7438, 1074, -8529, -10776, -42129, 8182, 23907, 34148, -11038, -2233, -20519, 39055, -48299, };
const TfArray<1, int> tensor_dimension25 = { 1, { 16 } };
const TfArray<16, float> quant25_scale = { 16, { 0.0006205457029864192, 0.00089117017341777682, 0.0010730160865932703, 0.0010513998568058014, 0.0010250546038150787, 0.001138571067713201, 0.00091889622854068875, 0.00055127975065261126, 0.00061677658231928945, 0.00058674206957221031, 0.00088150298688560724, 0.00057830603327602148, 0.00095516926376149058, 0.0012397250393405557, 0.00054507661843672395, 0.00068543112138286233, } };
const TfArray<16, int> quant25_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[96*1*1*16] = { 
  /* [0][0][][] */ 36,4,127,98,57,-33,30,-35,124,-9,-57,-88,44,66,-35,-64, 
  /* [1][0][][] */ 26,59,5,-24,100,2,8,41,62,56,-54,127,-24,-7,83,-113, 
  /* [2][0][][] */ 30,-69,-4,-18,-34,30,-43,89,-97,-86,11,103,-19,-127,51,-127, 
  /* [3][0][][] */ 126,127,-3,28,-118,-13,-58,-32,-10,-3,99,-67,-52,75,-56,-24, 
  /* [4][0][][] */ 12,-22,26,12,-35,29,-21,55,-84,-53,-5,-10,-3,-127,30,-13, 
  /* [5][0][][] */ 111,-55,-27,16,-24,-118,-27,12,-1,5,-127,-10,26,1,11,13, 
  /* [6][0][][] */ -103,-65,-19,69,-46,-8,-60,17,-98,-33,-44,-40,21,54,11,127, 
  /* [7][0][][] */ -25,12,-75,38,25,-127,-33,40,6,-39,16,-17,-5,25,-46,16, 
  /* [8][0][][] */ 40,-50,-13,3,22,23,-62,-70,-6,20,-87,6,-127,2,2,20, 
  /* [9][0][][] */ 15,-79,58,127,0,30,-4,-55,91,-72,15,-15,15,34,-70,19, 
  /* [10][0][][] */ -92,-36,-6,-28,127,42,27,51,81,-53,-92,54,98,-116,-99,85, 
  /* [11][0][][] */ 54,-17,-127,15,69,27,-23,35,-13,-27,-8,1,-6,15,-51,0, 
  /* [12][0][][] */ 127,-52,37,17,16,-49,-45,-25,60,34,-98,-46,-57,-22,-1,60, 
  /* [13][0][][] */ 66,-87,28,-56,110,16,-116,-127,34,-64,18,16,12,-76,62,-14, 
  /* [14][0][][] */ -54,32,-85,-44,76,-127,41,-63,47,50,-7,-105,20,103,-9,27, 
  /* [15][0][][] */ 16,-14,51,30,28,-38,-42,-22,6,-59,-42,-17,-127,-61,-16,42, 
  /* [16][0][][] */ -82,36,23,11,2,78,60,71,0,50,127,11,-7,2,1,-35, 
  /* [17][0][][] */ -14,-13,-47,-31,-22,15,47,59,-27,127,-12,10,-19,71,54,-10, 
  /* [18][0][][] */ -16,120,-65,5,23,-5,52,-91,51,127,-64,99,29,-40,52,-101, 
  /* [19][0][][] */ 9,-21,36,18,13,37,-6,15,8,7,-48,-11,-127,1,-16,26, 
  /* [20][0][][] */ 89,-67,-8,-72,-19,34,31,-88,-48,32,-127,-37,22,7,53,18, 
  /* [21][0][][] */ 53,8,127,43,-43,70,20,-2,-10,25,-12,-17,-19,86,-14,-19, 
  /* [22][0][][] */ 40,-1,28,26,-2,21,27,127,32,6,-5,51,-7,46,14,9, 
  /* [23][0][][] */ -21,16,-89,25,15,-127,15,42,11,-15,-30,-10,-64,10,8,35, 
  /* [24][0][][] */ 23,-41,7,-60,40,-18,-27,-27,22,46,56,88,-23,53,127,37, 
  /* [25][0][][] */ -127,-95,-45,-10,2,-10,11,-23,-58,10,-70,14,17,34,31,28, 
  /* [26][0][][] */ -7,8,41,12,-30,34,-50,78,-83,-80,-16,20,11,-127,52,5, 
  /* [27][0][][] */ -112,42,-48,27,59,-30,2,24,32,-47,127,24,-27,14,-24,-42, 
  /* [28][0][][] */ -16,-3,19,28,2,2,18,81,24,15,-26,-12,-127,-11,-15,34, 
  /* [29][0][][] */ -12,59,41,-35,36,-20,18,-26,-127,36,-31,3,9,43,-93,9, 
  /* [30][0][][] */ -9,-11,-127,-39,45,-53,7,22,-13,-15,-11,-18,-39,-26,0,4, 
  /* [31][0][][] */ 127,-24,-108,-8,21,-16,-53,36,-17,-8,-54,-68,6,-7,-68,21, 
  /* [32][0][][] */ -127,64,18,54,18,105,24,28,23,12,114,2,-30,34,-15,-24, 
  /* [33][0][][] */ 15,-16,127,-17,-96,23,21,-31,-25,14,-6,11,1,7,40,22, 
  /* [34][0][][] */ -41,-15,-43,-97,24,38,-20,-58,-47,-36,-20,-127,-22,-24,42,-8, 
  /* [35][0][][] */ 13,-21,42,39,54,-43,14,-26,-123,36,-15,20,-16,127,-47,-30, 
  /* [36][0][][] */ -115,30,-26,-20,-11,38,58,84,-4,20,127,-19,4,28,2,-39, 
  /* [37][0][][] */ -47,12,127,-45,-73,-59,32,-45,6,13,-21,7,-2,-75,73,13, 
  /* [38][0][][] */ -1,-21,-15,29,34,-54,-60,3,-18,-17,88,-17,127,21,-4,-6, 
  /* [39][0][][] */ -46,-42,10,-38,-52,-88,57,127,-9,-27,13,-56,-22,74,79,25, 
  /* [40][0][][] */ 72,-4,-16,-17,-12,99,-24,4,13,-4,26,-5,127,23,-19,-28, 
  /* [41][0][][] */ -14,-27,-34,-127,18,-7,-11,-52,4,-29,14,-29,-25,-24,-11,6, 
  /* [42][0][][] */ 25,26,22,111,-86,8,-126,14,-70,-94,57,-77,-33,127,-7,17, 
  /* [43][0][][] */ 11,120,-29,127,16,15,67,-64,-32,78,10,13,15,-51,56,17, 
  /* [44][0][][] */ 11,-30,-127,7,53,63,-46,42,-20,-29,37,-21,-1,-30,-60,-1, 
  /* [45][0][][] */ 9,17,0,-127,-5,9,67,1,-18,20,-32,8,-18,-90,16,-49, 
  /* [46][0][][] */ 8,24,54,-3,17,22,-42,35,29,-42,-47,15,9,127,47,-16, 
  /* [47][0][][] */ 17,-25,27,-53,-37,17,-60,65,-24,-35,19,40,18,-127,33,23, 
  /* [48][0][][] */ 9,-8,-1,-127,-7,-23,11,12,11,-29,3,-21,10,46,-4,58, 
  /* [49][0][][] */ 41,-45,2,121,93,12,-12,51,-64,0,33,45,-25,44,127,-17, 
  /* [50][0][][] */ -13,-4,73,-21,-9,127,-6,-63,26,-19,113,18,101,-23,-23,-55, 
  /* [51][0][][] */ 28,52,23,13,13,5,-35,17,25,3,0,127,10,27,24,-50, 
  /* [52][0][][] */ -20,56,127,-6,23,-20,14,-45,-16,-2,12,26,-15,104,-108,-6, 
  /* [53][0][][] */ 9,-41,-26,-127,-39,-1,13,-36,-12,40,3,-2,18,-11,68,25, 
  /* [54][0][][] */ 6,-3,-49,-44,20,5,-11,9,83,-16,3,-24,-1,127,29,34, 
  /* [55][0][][] */ -10,-25,-42,8,26,-41,-13,-127,13,-85,-10,-11,-50,-81,-46,-35, 
  /* [56][0][][] */ 39,49,27,62,6,-25,17,127,30,-16,5,-46,87,-8,-46,32, 
  /* [57][0][][] */ 74,-9,122,-7,-74,-63,-3,-31,9,5,-127,36,44,-48,48,16, 
  /* [58][0][][] */ 124,112,37,126,-127,-22,-22,58,-24,29,70,-31,-94,-50,-49,-88, 
  /* [59][0][][] */ 127,-36,6,-1,-40,-11,-6,19,-9,16,-108,-15,21,-12,9,23, 
  /* [60][0][][] */ -127,38,-14,0,-3,18,10,27,1,6,102,-3,-27,-5,4,-12, 
  /* [61][0][][] */ -107,66,16,25,50,10,-55,-48,127,-101,39,6,25,-7,-86,-32, 
  /* [62][0][][] */ -18,-50,-127,55,47,100,-25,72,39,-47,57,-21,-61,0,-76,29, 
  /* [63][0][][] */ -40,-1,127,-40,-51,-50,24,-22,10,13,3,6,-16,-37,72,8, 
  /* [64][0][][] */ 23,72,-9,37,46,-12,107,-108,-18,127,-9,10,-7,-99,-28,67, 
  /* [65][0][][] */ 7,22,2,-12,46,13,-5,-127,-28,-56,-29,-55,-12,-40,44,20, 
  /* [66][0][][] */ -127,4,-27,4,-55,19,27,-41,-87,-32,-82,46,63,22,51,84, 
  /* [67][0][][] */ -3,-45,4,127,12,-10,-29,30,60,19,9,-12,4,-34,-80,-10, 
  /* [68][0][][] */ 7,13,-23,127,-42,-14,-11,-33,-31,33,17,-8,-17,-60,-12,-30, 
  /* [69][0][][] */ 74,77,42,107,34,-10,59,-127,50,123,34,64,26,-3,37,9, 
  /* [70][0][][] */ 48,-61,59,-87,127,-9,33,28,75,-38,50,-44,12,122,13,91, 
  /* [71][0][][] */ 3,41,11,84,54,-127,-39,89,40,-86,26,7,9,-52,-60,21, 
  /* [72][0][][] */ -127,-69,-6,54,19,41,-28,15,-49,-21,-90,30,55,11,2,98, 
  /* [73][0][][] */ -3,-31,-27,43,29,-41,-10,-38,72,5,-1,2,16,127,-66,-36, 
  /* [74][0][][] */ 57,-51,16,-28,-29,-16,37,-16,-34,-11,-110,23,-127,2,40,45, 
  /* [75][0][][] */ -17,-16,-22,127,-39,2,-18,-48,-80,10,-28,-39,0,-45,-17,-34, 
  /* [76][0][][] */ 7,-6,0,48,50,20,-12,-122,18,-127,0,23,-24,-23,28,-43, 
  /* [77][0][][] */ 127,-36,25,58,-34,6,-27,-10,55,3,-27,66,30,13,-54,45, 
  /* [78][0][][] */ 9,-5,54,8,32,-13,-70,33,76,-17,-46,-38,46,127,64,-42, 
  /* [79][0][][] */ 1,14,50,25,48,59,-57,-60,16,-52,72,-21,127,-26,-27,-48, 
  /* [80][0][][] */ -127,-81,-84,110,-34,25,9,-22,-90,15,-84,6,35,-67,-1,43, 
  /* [81][0][][] */ 57,2,-72,28,127,88,-9,-17,-12,-110,-29,-96,-21,-7,-113,21, 
  /* [82][0][][] */ 121,127,9,45,-110,-40,-85,-29,-68,0,105,-60,-56,110,-14,-35, 
  /* [83][0][][] */ 127,40,10,-20,13,-6,-7,38,44,11,79,-24,-53,-31,-24,-74, 
  /* [84][0][][] */ 10,-61,-48,-57,33,1,1,-127,-35,-54,43,-8,-29,-19,-2,-23, 
  /* [85][0][][] */ -36,-7,-53,-46,-5,-6,76,103,-14,127,-9,-37,28,62,72,-33, 
  /* [86][0][][] */ 127,-27,-5,5,3,-12,0,-19,-7,5,-121,11,22,8,-15,16, 
  /* [87][0][][] */ -11,16,15,-43,-21,57,-26,52,-12,-20,63,1,20,-127,10,-2, 
  /* [88][0][][] */ 9,-10,-69,-68,74,-16,-57,-127,0,-26,12,-50,-49,11,33,-25, 
  /* [89][0][][] */ 16,1,44,-127,41,17,-64,98,87,-73,11,23,-33,35,26,35, 
  /* [90][0][][] */ -31,21,-44,95,87,-4,100,-107,110,127,-62,79,11,25,-19,-5, 
  /* [91][0][][] */ 50,-16,-42,-14,-3,-127,-5,-8,-20,1,-53,-16,27,-17,4,28, 
  /* [92][0][][] */ -3,-23,127,54,47,-3,-11,23,-36,8,-43,6,23,68,-1,-6, 
  /* [93][0][][] */ 127,-49,-28,-11,-33,-64,18,43,-32,54,-112,6,10,-1,12,34, 
  /* [94][0][][] */ 11,-14,58,76,107,-27,-23,53,6,-21,-5,54,-4,127,-22,-72, 
  /* [95][0][][] */ -119,36,35,46,16,37,30,-7,8,16,127,-1,-9,17,-11,-36, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant26_scale = { 96, { 0.00057493842905387282, 0.0008850970771163702, 0.00041636716923676431, 0.002604431938380003, 0.00081588677130639553, 0.00066122337011620402, 0.00068083475343883038, 0.0021473055239766836, 0.001211190246976912, 0.00039143027970567346, 0.00070087896892800927, 0.0015643814112991095, 0.0014025286072865129, 0.00037896059802733362, 0.00065542309312149882, 0.0010872306302189827, 0.0010362374596297741, 0.00066360353957861662, 0.00068642065161839128, 0.0017020344967022538, 0.0016110179712995887, 0.00057533383369445801, 0.00088983331806957722, 0.000774544314481318, 0.00080709491157904267, 0.0012666892725974321, 0.00067887484328821301, 0.00071920169284567237, 0.0016317680710926652, 0.0012808048631995916, 0.00084324524505063891, 0.00076229817932471633, 0.00044923124369233847, 0.0021149471867829561, 0.00070852698991075158, 0.0017721258336678147, 0.00044536864152178168, 0.00097873411141335964, 0.0017703786725178361, 0.00060713366838172078, 0.0021779870148748159, 0.00059060147032141685, 0.00052458455320447683, 0.00054598989663645625, 0.001308655715547502, 0.001065158168785274, 0.00074365321779623628, 0.00068260973785072565, 0.0009988758247345686, 0.00081249093636870384, 0.0014248385559767485, 0.0036857761442661285, 0.00052225682884454727, 0.00085623451741412282, 0.0008042437257245183, 0.00041300724842585623, 0.0012612505815923214, 0.00080836575943976641, 0.00069879117654636502, 0.0014491564361378551, 0.00048511213390156627, 0.00075748196104541421, 0.0013236342929303646, 0.0013574026525020599, 0.00057775824097916484, 0.00086201063822954893, 0.00090144627029076219, 0.0014443424297496676, 0.0005239149322733283, 0.00043779728002846241, 0.00063778361072763801, 0.0015527120558544993, 0.00078665983164682984, 0.0015197406755760312, 0.00076745281694456935, 0.001259799231775105, 0.00034451842657290399, 0.00092896464047953486, 0.00039221270708367229, 0.0012015091488137841, 0.0007067623664624989, 0.001490124617703259, 0.00056298152776435018, 0.0012642556102946401, 0.00068615743657574058, 0.00088281265925616026, 0.00079830805771052837, 0.00086699298117309809, 0.00045515911187976599, 0.0014115954982116818, 0.00039875524817034602, 0.0015550588723272085, 0.00060498545644804835, 0.00038864804082550108, 0.0011695079738274217, 0.00086221605306491256, } };
const TfArray<96, int> quant26_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int32_t tensor_data27[96] = { 17709, 1333, 12598, -849, 7416, 5338, 18015, 6404, -1515, 17939, 7971, 1997, 7618, 49358, -707, -2599, 8169, 13668, 2948, -319, -653, 16685, 6490, 3917, 8598, 6513, 8141, 4748, 133, -75, 6525, 9689, 17124, 2011, 9148, -703, 20034, 10513, 992, 5759, 864, 12224, 16110, 4900, 3201, 11776, 14965, 8440, 6239, 4160, 340, -698, 19749, 7183, 11298, 17425, -378, 8438, 4137, 4387, 13402, 6948, 3085, 7836, 7114, 5127, 8332, -859, 19923, 10586, 11772, -1281, -1871, 3329, 2178, 3980, 26549, 18771, 16761, -3986, 5846, -5459, -2658, 795, 8939, 6961, 7696, 6257, 14226, 4378, 13920, 4151, 13487, 27881, -9741, 14814, };
const TfArray<1, int> tensor_dimension27 = { 1, { 96 } };
const TfArray<96, float> quant27_scale = { 96, { 0.00014815606118645519, 0.00022808094217907637, 0.00010729378846008331, 0.0006711368914693594, 0.00021024611487518996, 0.00017039084923453629, 0.0001754445256665349, 0.00055333983618766069, 0.00031211198074743152, 0.00010086779366247356, 0.00018060971342492849, 0.00040312594501301646, 0.00036141803138889372, 9.7654476121533662e-05, 0.00016889617836568505, 0.00028016880969516933, 0.00026702834293246269, 0.00017100419790949672, 0.00017688395746517926, 0.00043859780998900533, 0.0004151437315158546, 0.00014825795369688421, 0.00022930142586119473, 0.00019959257042501122, 0.00020798054174520075, 0.00032641354482620955, 0.00017493947234470397, 0.00018533130059950054, 0.000420490832766518, 0.00033005099976435304, 0.00021729612490162253, 0.00019643685664050281, 0.00011576253746170551, 0.00054500141413882375, 0.00018258053751196712, 0.00045665964717045426, 0.00011476718646008521, 0.00025221030227839947, 0.00045620944001711905, 0.00015645245730411261, 0.00056124612456187606, 0.00015219228225760162, 0.00013518035120796412, 0.00014069631288293749, 0.00033722788793966174, 0.00027448093169368804, 0.00019163222168572247, 0.00017590192146599293, 0.00025740062119439244, 0.00020937103545293212, 0.00036716708564199507, 0.00094978878041729331, 0.00013458052126225084, 0.00022064334189053625, 0.00020724581554532051, 0.00010642796405591071, 0.00032501204987056553, 0.00020830801804549992, 0.00018007171456702054, 0.00037343357689678669, 0.00012500869343057275, 0.00019519576744642109, 0.00034108772524632514, 0.0003497895086184144, 0.00014888269652146846, 0.00022213178453966975, 0.00023229396902024746, 0.00037219305522739887, 0.00013500779459718615, 0.00011281611659796908, 0.00016435065481346101, 0.00040011884993873537, 0.00020271461107768118, 0.00039162245229817927, 0.00019776515546254814, 0.00032463806564919651, 8.8779059296939522e-05, 0.00023938519007060677, 0.0001010694177239202, 0.00030961725860834122, 0.00018212581926491112, 0.00038399067125283182, 0.00014507488231174648, 0.00032578641548752785, 0.00017681611643638462, 0.00022749227355234325, 0.00020571624918375164, 0.00022341568546835333, 0.00011729009565897286, 0.00036375448689796031, 0.00010275536624249071, 0.00040072359843179584, 0.00015589888789691031, 0.00010015083535108715, 0.00030137086287140846, 0.00022218472440727055, } };
const TfArray<96, int> quant27_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[1*3*3*96] = { 
  /* [0][0][][] */ -18,9,-20,107,-16,22,-64,-54,17,-5,97,-9,5,-7,-4,54,6,16,-34,4,70,2,30,-34,2,16,43,47,22,12,23,47,-6,25,11,-14,5,50,-60,-25,20,10,26,18,-83,-56,26,-5,-11,-19,-8,-7,49,5,-9,3,-3,-33,29,-31,26,0,127,28,-14,-11,11,-52,65,37,5,-5,78,-34,66,4,16,-127,29,66,2,15,127,-14,40,29,-27,-17,35,-7,-14,81,-1,20,-3,14, -49,15,-8,9,52,-9,-12,-127,38,15,-127,-5,-16,-12,5,94,17,-31,-19,-15,75,-95,127,26,-60,-34,-106,-16,27,33,-49,17,118,12,-13,-1,-25,127,-62,-127,9,-18,-32,12,47,-127,127,-45,-76,52,50,7,39,-63,32,56,37,42,-103,85,127,34,4,-19,42,-38,-96,-1,37,-30,-15,48,-48,-48,106,-3,-30,-60,-32,65,-65,63,-19,8,-12,46,55,-40,-29,53,-12,71,-127,-30,23,-127, 0,-2,-23,-76,9,18,36,20,-1,-2,5,61,2,-12,-10,7,-12,17,-19,18,5,25,23,-33,2,-33,10,10,-6,4,46,-79,44,16,9,-22,12,5,-32,-21,8,4,-17,8,25,-30,21,0,7,-9,6,-5,4,5,-5,8,-6,46,6,-5,11,-16,2,-16,-28,-18,31,-50,-105,-7,45,-17,-127,-22,-11,17,10,-12,5,13,-14,23,-35,-4,-39,22,24,37,-23,-18,25,-11,17,7,-3,-45, 
  /* [0][1][][] */ -40,60,-17,39,-83,-15,-12,-44,26,97,-47,-21,-30,-24,-4,61,127,-23,-93,-13,58,-127,-28,15,-36,-50,-127,-8,38,35,-49,28,-127,-76,-56,4,67,-2,-48,47,-20,86,0,-4,35,-50,-12,-32,127,44,-4,20,46,9,-37,-16,31,10,-125,127,-35,-85,20,127,-60,-35,-82,127,-37,127,-16,52,-35,-57,36,8,-35,-70,127,51,127,34,4,-1,127,28,-94,48,-38,-36,-103,39,92,104,27,-59, 127,127,127,127,-45,-127,127,24,127,-127,17,-127,-108,127,127,127,-16,-127,-63,-127,127,24,-64,127,127,127,-56,-127,127,127,-127,127,-9,-127,-122,127,-127,-44,92,109,-127,-127,127,127,127,-119,-108,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-43,41,-103,-26,-72,-67,127,127,-70,127,127,-108,-127,127,-41,127,-127,-127,-127,126,-76,127,-43,127,83,127,-39,-127,-25,-107,-127,-127,-22,-127,-24,-127,-127,117, -23,68,-37,3,127,71,-23,47,4,22,-13,-5,-28,-31,-11,-6,-104,-21,-127,38,31,77,-12,-117,-33,-43,125,71,10,36,72,9,124,-48,127,-3,54,5,-92,14,35,24,-24,2,-24,-53,-13,-43,81,12,-11,40,-6,-4,-73,-14,24,21,127,-93,4,127,-1,-35,-112,-29,-74,100,14,-18,119,25,-17,-57,13,47,-28,-9,-44,-4,-47,9,48,23,-89,34,127,-47,33,-23,127,-10,-114,35,33,19, 
  /* [0][2][][] */ -4,-38,-21,-61,-3,13,39,31,-1,10,-22,52,26,-35,-5,6,41,3,6,21,-11,29,-18,-27,1,-26,11,4,-9,-6,49,-76,-40,67,-26,-24,31,-33,-61,17,8,10,-36,22,14,-71,-12,0,-9,6,16,-7,9,1,-21,7,-2,46,-47,36,-5,-10,5,18,-7,-10,23,-55,-55,11,-21,-13,-118,-31,0,18,15,-11,57,20,24,22,-43,16,13,25,-20,11,5,24,22,-5,16,42,-8,-29, -28,-8,-26,24,-44,74,-24,66,7,-6,53,-12,127,-7,-17,-21,0,-40,-63,23,-22,78,-44,-113,-46,-50,102,69,14,44,54,-1,-123,62,-14,-22,-29,-26,-127,-5,45,-13,-16,40,-26,-44,-18,-48,-60,28,68,25,-10,-81,32,53,16,27,77,-55,21,-57,-9,2,18,-26,-127,-55,-9,-27,-60,22,37,-47,-30,-6,-44,26,-55,2,51,32,20,11,5,61,-91,127,15,126,-30,-18,108,-21,46,84, -9,-31,-26,30,13,65,-44,13,4,-7,-1,14,12,-51,-9,-14,-44,-6,16,20,-25,4,-21,3,-4,18,-3,52,-1,-6,34,29,17,44,19,-22,-7,-26,-28,9,10,-11,21,10,-72,-30,-13,4,-1,-17,-1,-4,-8,9,-15,-4,-1,-48,13,-31,-21,49,10,-28,-12,-1,34,-55,47,6,58,-22,32,-55,-15,22,12,12,-5,25,-30,29,92,-15,-17,53,39,-8,108,11,2,-18,6,-22,-7,-50, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant28_scale = { 96, { 0.0077947461977601051, 0.0051892334595322609, 0.011295268312096596, 0.0016687439056113362, 0.0079908594489097595, 0.0057410262525081635, 0.01382774394005537, 0.0033229494001716375, 0.0062442878261208534, 0.01658976823091507, 0.0078512458130717278, 0.012035549618303776, 0.0045758727937936783, 0.018786802887916565, 0.0085045443847775459, 0.0063253678381443024, 0.0040987725369632244, 0.012347640469670296, 0.0026626838371157646, 0.010642745532095432, 0.0021791961044073105, 0.0077238115482032299, 0.0060487464070320129, 0.013512181118130684, 0.0093635143712162971, 0.0098747434094548225, 0.007092923391610384, 0.0076877693645656109, 0.0045307562686502934, 0.0052440795116126537, 0.0042064571753144264, 0.0061359172686934471, 0.0050752456299960613, 0.005783232394605875, 0.0095378560945391655, 0.0070591908879578114, 0.016594259068369865, 0.0050135371275246143, 0.0018851798959076405, 0.007291221059858799, 0.0087781809270381927, 0.012992890551686287, 0.015859315171837807, 0.0066887852735817432, 0.0076879165135324001, 0.0025353285018354654, 0.0086954450234770775, 0.0098090535029768944, 0.0030662503559142351, 0.0081182010471820831, 0.010376118123531342, 0.0067718843929469585, 0.0090301968157291412, 0.0127782067283988, 0.010946212336421013, 0.020298713818192482, 0.012610918842256069, 0.0097610512748360634, 0.0048584877513349056, 0.0034756823442876339, 0.014161586761474609, 0.0066424980759620667, 0.010994664393365383, 0.005752908531576395, 0.0077278562821447849, 0.0083965631201863289, 0.003584287129342556, 0.0028606217820197344, 0.015213422477245331, 0.0093128671869635582, 0.0088723711669445038, 0.0052105500362813473, 0.0044674673117697239, 0.0052149174734950066, 0.0090919453650712967, 0.010747352614998817, 0.020078867673873901, 0.0022434710990637541, 0.010475729592144489, 0.034694656729698181, 0.0066852541640400887, 0.020392289385199547, 0.0041253562085330486, 0.0074392352253198624, 0.0053032161667943001, 0.0039350180886685848, 0.0053908750414848328, 0.0090861208736896515, 0.0093096252530813217, 0.0043697287328541279, 0.0082023115828633308, 0.0051517114043235779, 0.0061046597547829151, 0.017110677435994148, 0.07259620726108551, 0.0034897462464869022, } };
const TfArray<96, int> quant28_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 3 };
const ALIGN(16) int32_t tensor_data29[96] = { 10351, -9770, 2614, 55837, -1797, -4670, -9594, 1369, -2571, 702, 3480, -1799, 1899, -5011, 4506, -5559, -2271, 16603, 25769, 2566, 2823, -2364, 145, -825, 15941, 5, -1020, -3542, -5575, -6831, 9393, -9533, 1024, -962, 71, 13875, 1441, -4550, 20519, 90, -426, 1601, -8705, -7711, -8015, 64318, 84, 14870, 36508, -12530, -256, 8104, 6753, -356, -6736, 2210, -12481, 1543, 1886, -4299, -1785, -766, -13129, -949, 1606, 14756, 28675, 26859, -12419, 118, -9659, -880, 54913, 9496, 1006, 297, 18231, 31150, -597, -2221, -1663, -4386, 1780, -3286, 234, 2050, 210, -592, 1878, -2534, 151, 1125, 1996, -160, 754, 47762, };
const TfArray<1, int> tensor_dimension29 = { 1, { 96 } };
const TfArray<96, float> quant29_scale = { 96, { 0.00018340579117648304, 0.00012209962005726993, 0.00026577102835290134, 3.9264563383767381e-05, 0.00018802023259922862, 0.00013508296979125589, 0.00032535867649130523, 7.8187047620303929e-05, 0.00014692441618535668, 0.00039034750079736114, 0.00018473519594408572, 0.00028318940894678235, 0.00010766759805846959, 0.0004420424229465425, 0.0002001069369725883, 0.0001488321868237108, 9.6441712230443954e-05, 0.00029053271282464266, 6.2651386542711407e-05, 0.00025041753542609513, 5.1275204896228388e-05, 0.00018173674470745027, 0.00014232344983611256, 0.00031793367816135287, 0.00022031799016986042, 0.00023234690888784826, 0.00016689232143107802, 0.00018088868819177151, 0.00010660602856660262, 0.00012339011300355196, 9.8975462606176734e-05, 0.00014437452773563564, 0.00011941754928557202, 0.00013607606524601579, 0.00022442014596890658, 0.0001660986163187772, 0.00039045314770191908, 0.00011796558101195842, 4.4357173464959487e-05, 0.00017155814566649497, 0.00020654543186537921, 0.00030571507522836328, 0.00037316035013645887, 0.00015738318325020373, 0.00018089215154759586, 5.9654790675267577e-05, 0.00020459870574995875, 0.00023080126265995204, 7.214707147795707e-05, 0.00019101650104857981, 0.00024414397194050252, 0.00015933846589177847, 0.00021247522090561688, 0.00030066369799897075, 0.00025755795650184155, 0.00047761679161339998, 0.00029672752134501934, 0.00022967180120758712, 0.00011431735765654594, 8.178075950127095e-05, 0.00033321380033157766, 0.00015629407425876707, 0.00025869798264466226, 0.0001353625557385385, 0.00018183191423304379, 0.00019756620167754591, 8.4336170402821153e-05, 6.730874883942306e-05, 0.00035796288284473121, 0.00021912629017606378, 0.00020876167400274426, 0.00012260118091944605, 0.00010511688014958054, 0.00012270394654478878, 0.00021392812777776271, 0.00025287887547165155, 0.0004724439640995115, 5.2787556342082098e-05, 0.0002464877616148442, 0.00081634486559778452, 0.00015730010636616498, 0.00047981858369894326, 9.7067204478662461e-05, 0.00017504082643426955, 0.00012478155258577317, 9.2588663392234594e-05, 0.00012684412649832666, 0.00021379107784014195, 0.00021905000903643668, 0.00010281714639859274, 0.00019299557607155293, 0.00012121674080844969, 0.00014363905938807875, 0.00040260417154058814, 0.0017081460682675242, 8.2111677329521626e-05, } };
const TfArray<96, int> quant29_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[16*1*1*96] = { 
  /* [0][0][][] */ -9,23,-13,22,44,67,-16,-28,46,5,17,14,-20,16,24,67,2,-6,-5,-8,98,-65,3,-19,-20,-25,-45,-95,-11,-13,45,40,112,-12,2,-13,12,-20,-31,14,-31,5,26,-48,2,-28,-10,35,-18,21,-1,-1,-37,-10,9,3,38,19,-21,-27,-56,27,-12,-14,16,16,60,0,21,1,11,-33,-69,-7,-3,10,-6,-89,0,-6,49,-18,-53,-50,16,-12,4,19,-5,7,24,-30,20,19,-22,127, 
  /* [1][0][][] */ 69,-84,44,88,-33,-56,-14,-39,-37,-79,-1,15,32,-69,-28,-63,-86,-2,31,33,-30,-107,-47,10,127,-76,-76,20,-28,91,-17,51,24,6,-50,11,-19,-25,48,-39,9,-70,73,-36,-64,11,46,-3,31,33,-7,-72,66,-75,39,-39,15,24,-27,-100,45,-65,16,-67,5,-77,12,39,29,55,-32,-2,-99,33,-28,55,24,79,29,-35,51,1,-75,30,-69,71,-6,62,-54,8,27,1,16,-33,25,-4, 
  /* [2][0][][] */ 3,5,17,-23,17,-11,2,22,63,-3,8,62,14,11,70,7,-12,-19,17,0,-24,-77,23,-59,-12,-28,-24,32,6,26,118,-50,31,-89,-28,67,24,127,-48,-38,4,-28,7,27,-46,-43,-51,38,24,40,-35,-28,25,8,3,-38,-22,1,-11,35,8,0,81,96,32,-78,33,-82,-10,-16,-8,14,-34,4,-42,15,26,60,17,26,32,103,37,1,-19,4,-2,5,35,31,-6,-62,-37,-3,-8,57, 
  /* [3][0][][] */ -10,-17,-50,38,20,-26,-8,-30,-26,15,13,-8,4,-7,50,-12,50,-33,26,6,-18,-21,-9,-1,-11,11,9,-4,21,-50,64,-22,19,-18,-11,56,-10,2,-13,7,-7,-77,17,-14,-2,0,-3,-1,-127,41,-12,30,-124,-64,-23,-58,15,20,-10,58,0,18,8,19,-29,-102,-42,26,36,23,-8,27,-39,28,-27,-38,-52,-61,24,-39,-2,-30,18,63,40,54,42,12,27,-16,-9,6,-34,-1,-17,-37, 
  /* [4][0][][] */ -1,-20,21,-53,-2,-25,-47,8,-33,-47,-50,-17,10,68,7,-2,48,-21,1,-3,-14,24,53,7,5,7,24,5,3,-9,-7,-4,-22,13,-2,6,24,-31,1,-9,13,-1,-84,-23,35,-4,-16,-8,-2,78,-14,-21,-25,-5,7,-8,-3,-32,29,36,-5,11,5,-12,23,-100,18,-13,-46,24,-19,1,-6,15,-24,35,-18,55,35,-2,8,-10,127,-33,34,-23,-25,10,58,2,-12,15,-38,24,-5,-40, 
  /* [5][0][][] */ -12,-6,3,-5,-1,-11,5,96,47,-12,-17,-16,-15,28,41,25,-19,-8,3,-22,-39,-6,-3,-42,19,18,27,66,57,10,54,45,-40,5,-10,-9,-42,-41,-27,-9,-26,-19,0,-18,55,13,14,23,9,8,-23,17,-28,-1,7,-12,-24,-22,-8,28,-41,19,-13,-31,21,17,-17,2,0,17,15,0,19,8,2,2,-2,29,10,127,8,-37,20,29,7,1,17,-33,-9,-9,21,-111,-30,-20,-3,-102, 
  /* [6][0][][] */ -30,-11,-10,-61,1,-19,-5,9,6,26,-7,18,27,-59,13,-8,-7,-60,29,17,4,12,-23,21,71,0,-9,9,19,-3,11,-11,-30,-4,-27,-6,23,14,20,34,5,-29,-42,-34,-13,-22,31,-127,19,35,19,16,7,1,-6,-36,48,-12,-8,3,31,16,11,8,49,72,36,-25,-9,-11,37,-28,18,0,44,-14,-23,35,8,15,3,7,49,-29,-6,48,32,-34,17,20,-32,-10,-25,7,1,21, 
  /* [7][0][][] */ 20,7,31,-20,1,1,4,-20,0,-15,-13,-9,-15,-87,36,9,-3,-31,-20,-5,5,-15,-29,-4,-18,-1,1,-12,4,8,5,0,-13,3,-15,-15,1,-6,-30,26,14,-14,-16,23,-9,16,-5,73,-4,29,-8,-21,-28,6,-5,-51,32,-2,1,-6,-1,11,-5,-7,-17,47,18,-27,-1,-10,18,44,-7,-6,-19,5,45,13,-5,-12,23,-28,35,1,-35,127,5,-2,-33,-15,1,14,-26,-4,5,6, 
  /* [8][0][][] */ -54,29,-32,3,45,8,-9,23,18,62,-49,31,9,31,61,-7,-16,27,-82,25,13,33,-36,-5,-38,-16,9,7,37,-87,0,-7,19,-2,9,-23,-11,27,-37,48,18,16,15,-127,-45,-6,46,-14,-32,17,3,66,-85,79,14,4,11,-25,-17,-24,0,-40,7,23,-21,37,36,-26,0,-5,42,77,-18,31,34,35,-4,-84,0,-38,8,-8,27,21,-46,8,25,-48,-13,22,-21,6,17,-20,-11,-4, 
  /* [9][0][][] */ 14,-61,-41,-23,17,23,-23,17,33,-13,-8,-9,-40,-37,0,24,-7,7,34,-27,-17,-5,-24,-44,29,8,33,-2,-30,-20,-22,-1,-13,10,13,40,6,38,-35,11,17,13,-20,-77,11,-10,24,-127,-36,3,1,33,-9,2,-19,-4,-53,26,-14,19,12,11,13,29,9,108,30,51,-3,-2,8,-20,-11,-1,-40,6,56,-19,15,-2,-23,-1,14,-39,10,26,0,5,-49,29,-20,0,5,-1,-8,-28, 
  /* [10][0][][] */ 30,44,-30,37,93,-119,0,-26,1,53,33,5,-18,28,21,-90,10,36,-21,53,-92,-8,-9,-30,-69,-6,-52,47,8,7,6,38,-24,-23,42,-23,74,-21,-16,-7,-16,86,47,-32,-68,-19,-31,12,-11,-23,-46,-7,-13,-11,-2,-7,20,32,-26,-22,3,-6,-26,39,25,45,65,35,45,-13,43,63,-54,-32,-55,-11,6,39,-23,26,58,3,-64,-47,66,-61,108,-13,-14,24,27,-12,87,30,-11,-127, 
  /* [11][0][][] */ 45,41,-24,18,4,12,63,8,-3,-15,-22,1,-7,7,32,0,-8,-12,-101,2,7,15,0,-4,-43,-13,-12,6,0,22,-1,-4,-15,-4,10,1,8,15,-9,36,8,29,69,-109,27,-40,1,6,-127,10,6,-52,27,18,-14,25,-11,-23,5,7,20,-22,-6,12,-40,54,-6,12,25,-6,44,14,-49,-27,18,35,-1,-33,-49,7,28,0,87,48,6,-10,-19,-21,4,21,-19,-3,-7,1,-14,18, 
  /* [12][0][][] */ -41,-4,19,-12,-24,32,22,6,127,13,-3,6,-3,9,-43,-28,32,22,13,72,46,35,-7,-22,6,21,16,-30,-92,6,24,-37,6,-17,-8,-24,17,-4,36,-8,-38,-21,-12,0,8,34,10,9,18,9,-40,7,7,-9,8,11,71,-35,15,17,25,-13,15,-19,5,32,-33,0,-7,3,-1,-23,12,8,-62,6,36,0,9,-58,-5,11,28,39,-29,-17,-31,-34,9,18,-4,48,-18,-26,25,14, 
  /* [13][0][][] */ 25,-11,-29,22,33,3,7,-1,-8,-4,-7,2,11,-13,11,-14,22,-71,-37,8,-9,-16,5,0,14,13,-10,-9,-16,-29,-8,10,4,6,13,43,16,-3,10,16,1,8,17,44,18,17,-11,-127,21,-5,2,7,-10,-6,17,2,-22,21,27,8,2,20,-10,5,-8,-18,-26,-56,-1,16,-5,-29,-11,39,-13,14,-36,-1,9,-2,22,-7,-19,11,11,30,16,17,-7,-6,21,-8,3,8,-19,-13, 
  /* [14][0][][] */ -112,-49,19,52,25,-28,-41,7,-13,7,-19,-2,66,-3,-127,-1,72,-19,-16,24,-11,-13,30,13,-103,-1,29,-15,-38,-73,-26,-2,-5,6,28,-60,24,32,4,19,12,37,-13,-19,24,107,60,44,-100,44,8,34,-40,-5,24,-6,6,16,56,57,23,52,12,52,-11,-21,-48,43,-3,79,-71,-79,-69,4,6,40,-17,29,82,-18,34,6,33,23,48,8,43,39,25,26,62,3,4,24,17,-33, 
  /* [15][0][][] */ 74,-10,24,0,12,62,15,-13,-18,48,-7,-14,-81,-18,-18,36,9,50,55,-7,4,17,-80,48,4,7,65,-17,20,36,-59,-76,24,-41,47,10,35,-35,-43,-111,-13,24,4,46,3,56,-44,-34,81,-47,-49,36,25,-122,53,-120,-5,-50,14,20,-127,13,32,12,65,-12,-56,49,-30,64,-44,25,36,16,14,-5,16,-40,48,-10,-32,0,31,65,-30,-6,-13,-45,16,0,51,-9,-60,50,23,-12, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant30_scale = { 16, { 0.020114941522479057, 0.014025624841451645, 0.0132122952491045, 0.0090669551864266396, 0.017470715567469597, 0.016529429703950882, 0.013794997707009315, 0.0171168502420187, 0.010057953186333179, 0.01167001761496067, 0.016590535640716553, 0.029711809009313583, 0.02283187210559845, 0.021684750914573669, 0.020750461146235466, 0.014825786463916302, } };
const TfArray<16, int> quant30_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int32_t tensor_data31[16] = { -1448, 85, -8931, 33203, 23334, 1219, -7834, -9138, 17261, 5705, 25465, 21876, -10687, 14532, 36292, -18701, };
const TfArray<1, int> tensor_dimension31 = { 1, { 16 } };
const TfArray<16, float> quant31_scale = { 16, { 0.00047329274821095169, 0.00033001470728777349, 0.00031087754177860916, 0.00021334012853913009, 0.00041107565630227327, 0.00038892775774002075, 0.00032458818168379366, 0.0004027494287583977, 0.00023665772459935397, 0.00027458864497020841, 0.00039036554517224431, 0.0006991014233790338, 0.00053722050506621599, 0.00051022943807765841, 0.00048824615078046918, 0.00034884203341789544, } };
const TfArray<16, int> quant31_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[96*1*1*16] = { 
  /* [0][0][][] */ -1,53,-8,61,17,38,22,3,21,20,-46,80,0,-111,26,-127, 
  /* [1][0][][] */ 15,64,-8,-32,27,-28,127,-113,-4,91,-10,3,10,-55,46,16, 
  /* [2][0][][] */ -127,42,-36,-34,19,-19,62,87,-33,78,79,-27,-96,13,-4,-73, 
  /* [3][0][][] */ -119,63,29,68,-93,70,112,127,3,104,-114,-24,86,-121,-98,-40, 
  /* [4][0][][] */ 12,-2,37,60,-14,68,-9,42,4,-7,5,6,23,-8,-127,-9, 
  /* [5][0][][] */ -27,-47,61,0,24,-28,-15,27,-67,124,-18,-127,-35,51,-62,-38, 
  /* [6][0][][] */ 14,-3,40,-9,44,79,-87,-71,-3,-8,61,-14,127,-24,-10,-47, 
  /* [7][0][][] */ 27,37,127,0,-23,-47,20,2,-79,33,-76,-25,32,-6,37,-17, 
  /* [8][0][][] */ 48,51,85,19,-83,104,46,79,50,-5,19,-125,-60,-10,-127,-110, 
  /* [9][0][][] */ 25,-94,34,39,21,-26,19,42,127,23,52,9,-15,31,-95,-24, 
  /* [10][0][][] */ -53,-118,-13,-37,-127,3,-17,27,81,111,74,-44,-19,44,68,-23, 
  /* [11][0][][] */ 30,-25,0,-76,18,-28,-100,-127,-68,17,-11,-27,30,-19,53,-56, 
  /* [12][0][][] */ -31,12,25,-55,-28,-32,-108,-8,-52,-52,-19,18,22,127,94,51, 
  /* [13][0][][] */ -28,-112,-72,21,-22,-76,-2,-27,67,-1,-2,-18,10,15,127,28, 
  /* [14][0][][] */ 0,-82,71,25,9,18,13,127,-7,28,11,-20,21,21,-47,118, 
  /* [15][0][][] */ 21,-23,8,67,27,4,98,-9,5,-127,15,-34,3,-24,-14,-49, 
  /* [16][0][][] */ 41,-83,-43,26,8,-4,29,-78,127,86,114,-3,-2,97,67,107, 
  /* [17][0][][] */ -77,-48,15,83,68,28,6,-13,127,-32,-10,-35,8,46,-88,5, 
  /* [18][0][][] */ -1,-5,3,31,-103,-36,-1,17,-85,-30,-26,-74,4,-127,72,-11, 
  /* [19][0][][] */ 30,-23,36,-52,72,22,-103,72,57,-71,64,43,-8,39,36,127, 
  /* [20][0][][] */ 43,-41,83,-58,-23,7,-43,35,-15,-78,103,-25,23,23,-25,127, 
  /* [21][0][][] */ -60,7,-15,-32,24,13,-88,-59,-25,72,-7,22,-127,-15,49,21, 
  /* [22][0][][] */ 37,-31,24,-14,16,-81,3,-19,-127,38,-28,-62,-21,-6,82,-27, 
  /* [23][0][][] */ 22,6,16,-9,7,6,-14,0,-9,4,43,-3,127,-11,0,-42, 
  /* [24][0][][] */ -15,-2,0,-53,-27,-16,38,7,-36,1,3,-127,-4,-89,40,9, 
  /* [25][0][][] */ -127,-11,-24,-7,49,-14,-71,-113,-58,9,-31,-47,-61,-45,11,-60, 
  /* [26][0][][] */ 54,-19,56,-106,127,-31,-6,26,105,-59,3,3,1,81,2,97, 
  /* [27][0][][] */ 93,-27,17,-33,-27,-39,2,-14,-18,19,-127,17,12,-16,-1,33, 
  /* [28][0][][] */ -109,-5,-127,-97,62,-10,72,-88,4,42,-88,28,4,-6,-61,37, 
  /* [29][0][][] */ -50,-15,-23,127,-20,14,5,-30,-17,4,-69,36,23,-79,38,-23, 
  /* [30][0][][] */ 51,-73,127,-23,87,67,-25,85,-45,-100,35,-3,-13,31,-73,121, 
  /* [31][0][][] */ 12,-89,-3,-59,7,-55,33,-31,0,49,104,8,-22,103,64,127, 
  /* [32][0][][] */ -11,59,-41,41,-127,27,-75,-41,-60,-33,-5,45,20,52,37,69, 
  /* [33][0][][] */ 29,-16,32,117,25,-3,17,-54,-127,35,67,-26,1,-15,8,98, 
  /* [34][0][][] */ 41,25,13,-8,89,-50,-127,-32,-88,124,-42,5,-29,9,7,13, 
  /* [35][0][][] */ 65,12,-16,6,16,-127,-20,-2,-28,6,-69,0,72,21,2,20, 
  /* [36][0][][] */ 0,-3,-127,14,50,22,-33,16,-31,-13,-14,5,14,7,-18,12, 
  /* [37][0][][] */ -9,-6,127,-6,-49,20,17,-62,-22,29,-36,18,14,-7,17,9, 
  /* [38][0][][] */ -127,24,11,37,44,80,14,-14,21,-17,120,-8,-51,29,-22,-23, 
  /* [39][0][][] */ -12,-7,18,43,38,-9,-127,41,15,30,-8,-35,-3,-19,-4,-1, 
  /* [40][0][][] */ -14,71,-12,127,-3,41,37,54,-75,-35,-53,91,27,38,-72,-7, 
  /* [41][0][][] */ 30,-3,-27,-19,-33,-5,127,96,-47,103,-36,-9,-10,89,24,-16, 
  /* [42][0][][] */ 63,-46,-20,23,26,19,-44,80,75,-63,127,50,28,78,-42,40, 
  /* [43][0][][] */ -59,5,17,-26,32,27,-62,-103,-38,46,-16,-35,-127,-11,17,-22, 
  /* [44][0][][] */ 4,17,-24,-1,-12,-13,0,-46,127,4,24,34,29,57,6,25, 
  /* [45][0][][] */ -75,-81,12,-91,21,-12,-25,28,9,-77,-13,-11,37,79,-18,127, 
  /* [46][0][][] */ -44,6,-32,84,-68,-30,1,-72,-127,35,-47,-4,-10,21,-9,-25, 
  /* [47][0][][] */ -22,-18,-76,127,16,67,-10,-14,10,32,49,65,-8,-14,29,-22, 
  /* [48][0][][] */ -3,8,-7,-127,9,-43,3,-11,-67,66,30,-8,15,26,92,27, 
  /* [49][0][][] */ 7,0,46,116,2,48,-47,11,39,-54,-84,-53,-36,-54,-69,-127, 
  /* [50][0][][] */ 8,89,8,-115,81,10,-3,60,127,-20,-27,11,3,-56,4,-43, 
  /* [51][0][][] */ 3,-35,21,-18,30,-25,-61,-127,17,-70,-1,-8,-2,-3,0,5, 
  /* [52][0][][] */ 0,15,14,58,37,-17,-97,88,-93,126,-36,-50,88,127,12,-16, 
  /* [53][0][][] */ -13,75,27,-97,-22,5,26,-14,-61,-37,-14,55,16,-127,-91,-31, 
  /* [54][0][][] */ -6,12,30,32,56,-26,4,-38,-8,21,-11,-17,-10,127,-44,-14, 
  /* [55][0][][] */ -96,127,93,-7,47,-3,-24,4,-50,14,77,-12,-14,-15,94,-12, 
  /* [56][0][][] */ 60,10,32,-120,93,-12,-19,24,58,-44,50,127,-14,18,95,53, 
  /* [57][0][][] */ -11,11,33,57,-23,28,59,127,-17,-2,18,-37,17,51,3,31, 
  /* [58][0][][] */ 19,127,20,-113,-4,42,-21,28,115,-18,-5,74,1,-78,41,78, 
  /* [59][0][][] */ 14,30,45,-87,-33,2,16,7,4,17,21,-47,6,-127,-63,23, 
  /* [60][0][][] */ 52,-33,127,-57,-52,121,10,-50,-21,41,-55,-11,8,16,40,-10, 
  /* [61][0][][] */ -11,41,-46,-90,-91,40,127,97,-18,64,21,24,35,88,23,-42, 
  /* [62][0][][] */ -65,-31,-17,1,-96,28,-107,10,-41,-44,-57,-54,21,-122,127,16, 
  /* [63][0][][] */ 32,-47,-12,-79,44,-6,-100,-127,-68,98,-17,-9,63,4,11,-34, 
  /* [64][0][][] */ -21,1,19,43,74,-7,-26,-127,33,-89,-4,-48,1,-19,0,13, 
  /* [65][0][][] */ -127,8,27,-71,20,77,59,-57,-86,43,60,-19,-7,16,-13,-21, 
  /* [66][0][][] */ 65,9,72,21,-39,27,-13,28,-28,24,61,-80,-21,47,-127,-11, 
  /* [67][0][][] */ 27,-23,-39,58,50,-48,-107,-76,30,-127,-44,-52,-74,-2,-68,33, 
  /* [68][0][][] */ -23,-65,-118,85,-51,-112,19,-64,-37,19,27,-109,-33,73,127,-9, 
  /* [69][0][][] */ -18,38,-74,73,-3,-127,29,110,37,35,53,-25,120,37,-34,-8, 
  /* [70][0][][] */ 6,-1,-38,-39,-37,6,127,87,-29,43,-17,18,14,40,15,-4, 
  /* [71][0][][] */ 15,-14,-23,-46,26,10,15,61,-21,-32,-11,2,10,-127,59,6, 
  /* [72][0][][] */ 40,18,-3,44,34,-40,-59,-127,24,62,-72,8,53,61,37,58, 
  /* [73][0][][] */ -64,-127,-13,-80,-68,-26,34,-40,0,8,-37,-29,8,-61,73,-17, 
  /* [74][0][][] */ -46,37,54,90,-14,-4,-127,114,23,-41,-46,-44,2,-16,-20,-22, 
  /* [75][0][][] */ -54,33,-30,21,-28,97,82,127,5,72,10,-40,-105,75,14,11, 
  /* [76][0][][] */ 14,-39,-48,-35,48,-95,-127,-99,-16,-17,-12,-22,60,7,95,-58, 
  /* [77][0][][] */ -42,14,-48,-33,-60,-12,-10,-48,127,15,-73,17,-9,32,34,-97, 
  /* [78][0][][] */ -111,-109,-21,99,62,67,-60,43,-14,-77,-109,57,66,-25,127,58, 
  /* [79][0][][] */ 52,-20,45,-57,127,13,54,7,81,31,-6,39,-18,-34,11,-40, 
  /* [80][0][][] */ 4,-36,70,-127,-35,-38,3,2,-85,-53,-1,-72,10,120,-47,17, 
  /* [81][0][][] */ 9,-1,51,26,12,49,-13,-15,0,-23,-22,-32,-12,22,-127,25, 
  /* [82][0][][] */ -62,-29,17,-127,-4,-54,-23,-38,-45,-70,-59,-97,-33,-97,-57,36, 
  /* [83][0][][] */ 19,40,19,-78,-51,11,-18,76,-118,-17,11,-92,4,-127,9,37, 
  /* [84][0][][] */ 127,32,37,45,-59,-3,-68,7,-3,-23,110,12,-87,20,76,-81, 
  /* [85][0][][] */ -14,-11,-2,-13,38,3,-33,102,-66,-80,-48,-33,-17,74,67,-127, 
  /* [86][0][][] */ 10,-4,35,1,-72,65,-85,29,-95,-64,79,-32,-19,-127,-19,29, 
  /* [87][0][][] */ 127,-68,29,-8,-40,-46,-8,-6,1,2,-122,18,48,10,24,48, 
  /* [88][0][][] */ 75,73,-8,-7,-11,-19,-14,-31,77,53,52,60,-48,-26,127,-88, 
  /* [89][0][][] */ 39,80,-59,-18,-36,-21,18,-83,27,28,39,-34,-17,-5,-21,-127, 
  /* [90][0][][] */ 22,-38,9,-68,-80,36,127,-69,91,-62,58,-92,45,-10,-42,-28, 
  /* [91][0][][] */ 15,1,-34,-75,-39,10,41,-22,-40,46,63,66,14,-15,30,127, 
  /* [92][0][][] */ 15,5,-9,-3,56,-26,-75,-127,35,-68,0,-29,-25,-9,-1,-25, 
  /* [93][0][][] */ 64,9,37,-127,-35,-6,-25,60,40,-78,55,6,-32,91,-26,15, 
  /* [94][0][][] */ -127,34,-91,12,85,-120,2,14,-6,-43,102,-46,16,-5,-23,-15, 
  /* [95][0][][] */ -30,94,20,-127,-6,-6,-41,15,10,-33,-73,-107,-16,40,-74,-18, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant32_scale = { 96, { 0.00083200621884316206, 0.0006825697491876781, 0.00055942975450307131, 0.0002355184406042099, 0.00060083635617047548, 0.00089736265363171697, 0.0011328347027301788, 0.0010255464585497975, 0.00023920074454508722, 0.0010484198573976755, 0.00076321704545989633, 0.00062835507560521364, 0.00041837294702418149, 0.00055256625637412071, 0.00023535263608209789, 0.0011461853282526135, 0.00050101778469979763, 0.00061512162210419774, 0.00045139595749787986, 0.00088105152826756239, 0.0010040402412414551, 0.0019310574280098081, 0.00060317543102428317, 0.0019257717067375779, 0.0022808541543781757, 0.00077860732562839985, 0.00056477432372048497, 0.00066973461071029305, 0.00082748784916475415, 0.00031232406035996974, 0.00017563572328072041, 0.00038852347643114626, 0.00060137378750368953, 0.00084935338236391544, 0.00061799935065209866, 0.0010365152265876532, 0.0012021122965961695, 0.0014043066184967756, 0.000451877829618752, 0.0021325515117496252, 0.00042821493116207421, 0.00051238905871286988, 0.00022211681061889976, 0.00097144220490008593, 0.00037918242742307484, 0.00061967934016138315, 0.00099585147108882666, 0.00061107479268684983, 0.00022177935170475394, 0.00066018715733662248, 0.00067922379821538925, 0.00067633989965543151, 0.00095887680072337389, 0.00073978700675070286, 0.0013749347999691963, 0.00054267077939584851, 0.00064858375117182732, 0.0003903752367477864, 0.0012737611541524529, 0.0006936283316463232, 0.0011280837934464216, 0.00030448404140770435, 0.00048030316247604787, 0.00064895855030044913, 0.00083462352631613612, 0.00067095522535964847, 0.00085661956109106541, 0.0010361038148403168, 0.00056703126756474376, 0.00071267021121457219, 0.00075296236900612712, 0.00054271001135930419, 0.00036907798494212329, 0.00056292430963367224, 0.0011897499207407236, 0.00089833780657500029, 0.00070850929478183389, 0.00090225622989237309, 0.00093177123926579952, 0.00089030846720561385, 0.00038463086821138859, 0.00040463570621795952, 0.00052249082364141941, 0.00038513579056598246, 0.0010824889177456498, 0.00114369613584131, 0.0005778635386377573, 0.0001706423208815977, 0.00050421763444319367, 0.00067241751821711659, 0.00071684969589114189, 0.0014064768329262733, 0.00075309397652745247, 0.00065864273346960545, 0.00066275219433009624, 0.00041144850547425449, } };
const TfArray<96, int> quant32_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[96] = { 1435, 7236, 11002, 31499, 16177, -3692, -2336, 5248, 31230, -4305, 11314, 4611, 10081, 13451, 32667, 1624, 3112, 6352, 16211, 4300, -219, 410, 10645, -1093, 3644, 119, 12726, 6848, 6448, 36512, 51658, 20841, 8884, -868, 10776, 1799, 1271, 3406, 19193, -864, 14260, 9875, 39521, -3600, 28004, 8051, 5570, 14212, 60464, 10241, -621, 8229, -3558, -257, -2407, 6588, -452, 15681, 5153, 6893, 4495, 14412, 10217, 4850, 9558, 9401, 4808, -4127, 9710, -3192, 4692, 9527, 18126, 5798, -4272, -4793, 7595, 226, 2775, -1389, 17125, 13524, 5469, 16170, 3445, 106, 13088, 72969, 8732, 10686, 5588, -314, 6339, 7843, 5612, 13286, };
const TfArray<1, int> tensor_dimension33 = { 1, { 96 } };
const TfArray<96, float> quant33_scale = { 96, { 0.00025686409207992256, 0.00021072878735139966, 0.00017271195247303694, 7.2711271059233695e-05, 0.00018549535889178514, 0.00027704148669727147, 0.00034973843139596283, 0.00031661550747230649, 7.3848103056661785e-05, 0.00032367717358283699, 0.00023562691058032215, 0.00019399117445573211, 0.00012916368723381311, 0.00017059298988897353, 7.2660084697417915e-05, 0.00035386017407290637, 0.00015467850607819855, 0.00018990562239196151, 0.00013935883180238307, 0.00027200579643249512, 0.00030997590511105955, 0.00059617258375510573, 0.00018621749768499285, 0.00059454073198139668, 0.00070416484959423542, 0.00024037832918111235, 0.00017436197958886623, 0.000206766213523224, 0.00025546914548613131, 9.6423362265340984e-05, 5.4223764891503379e-05, 0.00011994830128969625, 0.00018566127982921898, 0.00026221966254524887, 0.000190794060472399, 0.00032000188366509974, 0.00037112642894499004, 0.00043354957597330213, 0.00013950759603176266, 0.00065837957663461566, 0.00013220218534115702, 0.00015818914107512683, 6.8573805037885904e-05, 0.00029991197516210377, 0.0001170644536614418, 0.00019131271983496845, 0.00030744780087843537, 0.00018865625315811485, 6.8469620600808412e-05, 0.00020381863578222692, 0.00020969579054508358, 0.00020880546071566641, 0.00029603266739286482, 0.00022839338635094464, 0.00042448166641406715, 0.00016753797535784543, 0.00020023633260279894, 0.00012051998783135787, 0.00039324647514149547, 0.00021414288494270295, 0.00034827171475626528, 9.4002927653491497e-05, 0.00014828331768512726, 0.00020035204943269491, 0.00025767213082872331, 0.00020714304991997778, 0.00026446292758919299, 0.0003198748454451561, 0.0001750587543938309, 0.00022002165496814996, 0.00023246099590323865, 0.00016755008255131543, 0.00011394492321414873, 0.00017379081691615283, 0.00036730981082655489, 0.00027734256582334638, 0.00021873707009945065, 0.00027855226653628051, 0.00028766441391780972, 0.00027486367616802454, 0.00011874653864651918, 0.00012492260430008173, 0.0001613078493392095, 0.00011890242603840306, 0.00033419526880607009, 0.00035309168742969632, 0.0001784029882401228, 5.2682160458061844e-05, 0.00015566639194730669, 0.00020759450853802264, 0.00022131198784336448, 0.00043421957525424659, 0.00023250162485055625, 0.00020334182772785425, 0.00020461053645703942, 0.00012702590902335942, } };
const TfArray<96, int> quant33_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[1*3*3*96] = { 
  /* [0][0][][] */ -48,-72,-10,127,22,73,78,-57,-15,-18,-14,-7,-28,1,36,6,-11,-44,27,21,19,-127,127,5,-85,11,50,-28,-127,-127,38,25,14,26,59,-19,-29,-10,33,-3,-15,28,-108,72,24,-65,39,47,-18,52,-27,19,6,-6,13,47,-90,-49,-62,-18,-9,3,10,39,69,-25,73,14,-10,15,19,127,24,24,27,0,-10,17,127,-4,-14,16,-29,20,124,20,-76,-16,3,-32,-15,-38,1,-24,-16,25, 127,-127,74,106,-43,127,41,-117,67,5,-17,127,127,-98,-14,17,10,127,127,-110,127,-72,83,72,-127,-113,-68,-35,-56,47,-59,-20,-93,52,-127,-86,-43,-14,-51,59,-1,127,127,85,-53,-111,-112,-50,-15,-127,43,82,71,-31,42,82,-46,41,-76,-112,-44,-38,-65,68,75,-62,26,31,-83,30,-18,91,117,127,12,18,2,57,-33,53,66,127,127,-26,-10,71,-111,127,-115,-99,6,-127,-90,-127,-39,105, -76,-11,30,-84,14,-25,64,-7,79,-34,-27,19,-18,-5,-9,-11,-10,-18,7,-3,-21,-97,31,0,-126,99,7,-55,116,51,-15,8,0,12,14,-30,-8,34,20,13,25,12,-121,70,16,-19,38,14,-15,12,-17,3,-12,2,-2,21,-65,5,-30,51,2,42,32,-1,-5,-39,-33,24,8,0,-4,35,10,-26,-6,5,-11,-6,-84,3,-19,-25,-16,1,-110,9,-33,-23,-48,27,-25,-31,29,-26,-15,1, 
  /* [0][1][][] */ -65,-74,74,-36,-47,94,17,127,-51,-21,0,-122,26,-114,77,31,-2,-61,-16,88,52,-71,47,49,-100,-8,127,-22,-24,64,118,-103,-127,92,-85,-57,-35,33,-28,89,-50,-26,-5,45,-49,127,-22,67,15,96,19,-2,14,-53,25,30,127,121,-71,-85,127,-29,-36,127,73,-38,-16,-2,127,39,127,96,-41,103,-7,12,14,14,-33,11,-42,125,-81,110,0,31,-54,31,78,-127,-30,-6,127,-69,-23,-1, 68,127,56,-115,127,80,93,37,-127,127,127,-39,-66,-127,-127,127,127,-65,-122,-49,104,94,-126,127,-108,-88,-43,127,-127,109,-127,-127,-90,127,105,127,127,-127,-106,127,-65,-96,107,-127,-127,-34,-127,-127,127,-113,86,42,127,127,127,-127,100,-127,-127,127,20,-76,-127,-101,-127,127,-127,127,-127,-127,-109,-86,-127,-79,127,127,-127,127,-78,127,127,31,-42,-127,59,127,94,46,127,13,127,2,-68,36,127,-127, -54,-13,-51,38,-56,-98,40,-27,18,-35,-28,94,2,92,13,10,-2,63,-6,127,3,-87,-42,11,-79,107,-70,-20,-70,-17,16,-63,-75,38,6,-18,-28,46,-68,43,127,-5,-41,34,-42,-57,15,46,8,118,-12,5,-38,-71,2,20,95,2,-1,21,-33,127,91,-54,-42,12,36,-12,-79,119,-19,-90,-1,-53,-17,-19,26,16,78,-36,-68,-42,58,15,-48,-20,71,22,17,62,-44,19,-43,98,-26,-6, 
  /* [0][2][][] */ -68,2,-2,-22,13,-51,68,27,55,-29,-36,-2,18,19,-27,3,-6,67,7,0,-51,-83,1,-10,-29,-49,36,-69,91,39,25,27,17,-9,-10,-47,-5,35,-2,0,-16,-5,-69,106,4,32,12,38,-16,-32,9,-21,20,0,9,15,-70,23,-16,14,14,2,-19,-5,1,-47,-47,16,-33,11,27,30,14,-19,30,4,18,6,-81,-9,-7,-7,17,15,-127,7,13,-43,-59,-50,-26,-48,10,59,-21,-8, 123,35,-127,-37,-72,-26,44,29,-64,-30,-20,-109,-78,111,-14,36,3,-51,-8,-125,93,-46,-39,0,-113,127,-51,20,-35,-21,-8,-3,-64,14,28,5,-22,-28,127,49,12,-14,63,-35,-38,76,-68,-43,-34,-7,-127,-127,-51,-24,1,39,-65,-7,16,39,-8,-18,8,-48,-53,33,64,-24,115,104,-24,-72,11,-57,4,3,98,4,52,24,13,-96,-51,3,3,7,127,40,-56,39,-18,-106,40,82,-12,26, -55,13,-19,25,15,-67,-127,2,-11,-7,-16,3,15,-27,17,-1,-9,-16,4,18,-45,-73,15,3,13,-94,21,3,-48,-39,-7,17,41,-22,-4,-26,-34,4,41,-46,22,-2,-51,-36,2,65,23,16,-10,-5,10,-10,16,4,-4,-4,-62,-14,-1,-38,-12,10,83,-12,36,-2,-2,30,1,5,-3,19,-18,17,3,15,34,1,76,-10,5,-7,-8,-18,74,-2,43,-39,60,41,-17,-53,-8,3,-16,-15, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant34_scale = { 96, { 0.0045547247864305973, 0.0036059168633073568, 0.0047661261633038521, 0.0093355076387524605, 0.010520334355533123, 0.008089202456176281, 0.0038349730893969536, 0.0043084262870252132, 0.0107151223346591, 0.0070339106023311615, 0.013138146139681339, 0.0055260136723518372, 0.012322871945798397, 0.0087509565055370331, 0.015979267656803131, 0.0072526503354310989, 0.0087766032665967941, 0.0069268029183149338, 0.0091351047158241272, 0.0025961096398532391, 0.0032760112080723047, 0.0018114815466105938, 0.0063181058503687382, 0.0043249316513538361, 0.0032292925752699375, 0.0059839626774191856, 0.0062704645097255707, 0.0065419552847743034, 0.0035721987951546907, 0.021729201078414917, 0.015109607949852943, 0.010902070440351963, 0.0046050986275076866, 0.0072284378111362457, 0.009723409079015255, 0.019766630604863167, 0.017202360555529594, 0.009489845484495163, 0.011520549654960632, 0.0050363554619252682, 0.009358593262732029, 0.010309727862477303, 0.013563136570155621, 0.0041901115328073502, 0.014457937330007553, 0.0043981727212667465, 0.0045027676969766617, 0.011176132597029209, 0.027801195159554482, 0.0049638594500720501, 0.018640754744410515, 0.0082387886941432953, 0.0073125665076076984, 0.0066731628030538559, 0.007979903370141983, 0.0053360299207270145, 0.0063555347733199596, 0.017955916002392769, 0.0021217858884483576, 0.0068513569422066212, 0.01199023611843586, 0.012750100344419479, 0.0049460497684776783, 0.0063559478148818016, 0.0065148714929819107, 0.0054471641778945923, 0.01217661052942276, 0.012242745608091354, 0.0088690333068370819, 0.0042507541365921497, 0.0096627548336982727, 0.0044486075639724731, 0.013283723965287209, 0.0067038070410490036, 0.013563618063926697, 0.0095865707844495773, 0.0062589622102677822, 0.0035117398947477341, 0.002410931745544076, 0.0076389056630432606, 0.0082446187734603882, 0.0104721924290061, 0.0080428002402186394, 0.01164847519248724, 0.0022504024673253298, 0.0053442283533513546, 0.0034448034130036831, 0.018995849415659904, 0.012153226882219315, 0.0051465504802763462, 0.015180348418653011, 0.0012858320260420442, 0.0073852185159921646, 0.0045791328884661198, 0.014364409260451794, 0.010938342660665512, } };
const TfArray<96, int> quant34_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const ALIGN(16) int32_t tensor_data35[96] = { 22507, 66626, -1275, 373, 13632, -4302, -1111, -491, 6003, 14529, -3295, 119, 560, 4557, 5847, -9340, -4142, -153, -565, 17666, -11015, 17141, -1888, 6818, 26022, 107, -6541, 18647, 14968, -19436, 2049, 21916, 24651, -9877, 1871, -177, -864, -670, 3892, -7542, -5372, -376, -8067, -256, 30925, -1642, 12387, -2558, -14676, 1168, -42, 516, -2936, 17445, -4659, 13228, 18258, 574, 34137, -343, -9557, -1616, 1579, -476, -3147, 14608, -806, -7634, -1908, 4069, 1268, -2578, 1179, 330, -2391, -8263, -539, -2054, 44974, -7417, -7055, -12129, -37, 752, 67604, -11634, -10752, -28060, -7051, 9414, -2496, 35708, -63, -2397, -2557, 1385, };
const TfArray<1, int> tensor_dimension35 = { 1, { 96 } };
const TfArray<96, float> quant35_scale = { 96, { 0.00010716999531723559, 8.4845101810060441e-05, 0.00011214414553251117, 0.00021965900668874383, 0.00024753727484494448, 0.00019033417629543692, 9.0234665549360216e-05, 0.00010137473873328418, 0.00025212051696144044, 0.00016550377767998725, 0.00030913285445421934, 0.00013002385094296187, 0.00028994993772357702, 0.00020590485655702651, 0.00037598278140649199, 0.00017065060092136264, 0.00020650830992963165, 0.00016298360424116254, 0.00021494364773388952, 6.1084931076038629e-05, 7.7082615462131798e-05, 4.2623094486771151e-05, 0.00014866131823509932, 0.00010176310024689883, 7.5983356509823352e-05, 0.0001407991221640259, 0.00014754034054931253, 0.00015392836940009147, 8.4051738667767495e-05, 0.0005112753133289516, 0.00035552019835449755, 0.00025651929900050163, 0.0001083552633645013, 0.00017008089344017208, 0.00022878609888721257, 0.00046509719686582685, 0.00040476143476553261, 0.00022329048078972846, 0.00027107176720164716, 0.00011850248120026663, 0.00022020220058038831, 0.00024258183839265257, 0.00031913263956084847, 9.8590862762648612e-05, 0.00034018675796687603, 0.00010348641808377579, 0.00010594747436698526, 0.00026296783471480012, 0.00065414578421041369, 0.00011679669842123985, 0.00043860598816536367, 0.00019385386258363724, 0.00017206039046868682, 0.00015701560187153518, 0.00018776243086904287, 0.00012555364810395986, 0.00014954200014472008, 0.00042249215766787529, 4.9924376071430743e-05, 0.00016120840155053884, 0.00028212321922183037, 0.00030000237165950239, 0.00011637764691840857, 0.00014955172082409263, 0.0001532910973764956, 0.00012816856906283647, 0.00028650849708355963, 0.00028806462069042027, 0.00020868313731625676, 0.00010001774353440851, 0.00022735894890502095, 0.00010467311949469149, 0.00031255822977982461, 0.00015773663471918553, 0.00031914396095089614, 0.00022556637122761458, 0.00014726970402989537, 8.2629172538872808e-05, 5.6727807532297447e-05, 0.00017973895592149347, 0.00019399102893657982, 0.00024640452465973794, 0.00018924236064776778, 0.00027408177265897393, 5.295064693200402e-05, 0.00012574654829222709, 8.1054196925833821e-05, 0.00044696117402054369, 0.00028595828916877508, 0.00012109530507586896, 0.00035718467552214861, 3.0254872399382293e-05, 0.00017376984760630876, 0.00010774430847959593, 0.00033798610093072057, 0.00025737276882864535, } };
const TfArray<96, int> quant35_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[16*1*1*96] = { 
  /* [0][0][][] */ -21,-10,5,-26,13,-9,-35,-1,22,0,-13,-1,-1,-7,-22,8,-2,4,-8,2,6,-29,-3,9,1,3,5,127,39,-31,53,-10,-3,7,2,8,-8,15,-37,-7,-14,12,2,30,11,26,15,6,30,7,-9,12,12,-19,-11,80,5,12,-23,-33,1,31,0,-32,-45,-58,-23,43,-1,14,19,-16,-12,-40,0,-23,-24,25,4,0,-10,-25,20,21,-4,-9,-4,-91,9,-5,2,-5,43,-28,-32,-9, 
  /* [1][0][][] */ 27,-63,-99,-58,117,-15,61,33,-24,-104,-70,-11,3,-10,-79,38,-66,6,40,45,10,43,-14,-47,14,-2,-19,-71,47,-23,-59,41,-40,43,-18,1,6,7,21,31,-51,38,-40,-46,-46,92,3,8,10,-77,9,-52,-14,36,55,14,-44,-29,-42,-40,26,-11,3,-44,-97,118,-23,-29,-21,-18,-24,20,47,-127,-21,7,30,-64,46,7,18,-37,27,4,-54,49,-14,30,40,-37,-6,10,18,3,49,113, 
  /* [2][0][][] */ -10,61,-80,-2,79,64,38,69,18,-110,-5,-25,-13,-17,28,44,19,0,-54,66,9,-4,57,37,46,18,-5,-34,46,-4,54,-55,41,34,-14,45,-127,-92,32,25,-1,-35,26,-27,25,-9,-3,63,-25,22,-33,-17,83,-8,-13,45,25,12,33,11,33,34,18,-34,21,0,-30,-2,-54,13,-11,-22,-40,-72,-1,68,56,49,22,-11,21,-58,9,-18,-28,24,9,41,-11,34,-14,-9,1,-28,-57,13, 
  /* [3][0][][] */ 49,14,78,-17,57,-29,9,-6,-26,-52,18,-29,-4,23,37,96,23,-10,30,6,127,-22,45,8,54,0,-14,11,29,29,-15,79,-88,20,34,-16,-26,-26,-14,48,-64,-34,58,26,16,24,-50,-83,-56,-28,-34,37,-1,-114,7,25,-93,61,48,31,0,59,-9,-49,29,60,-4,-54,43,-30,-4,-61,51,-27,45,-17,18,-4,50,38,-40,-67,22,-14,-20,1,20,25,15,-3,13,33,36,89,43,-51, 
  /* [4][0][][] */ 25,-5,27,-7,127,47,-21,-22,-53,-46,-26,-17,-58,27,-8,36,31,-77,-45,74,-25,13,32,-23,8,4,2,-35,15,-15,48,-29,77,13,-24,-4,52,33,-1,9,-34,-10,-33,-35,-1,-75,-10,10,40,10,-14,10,-1,-37,15,-34,43,-10,-37,20,-22,38,72,16,35,51,-21,-7,-41,2,44,54,20,-82,-46,-19,34,27,81,-29,-4,-27,0,2,-70,9,37,54,-50,23,17,-34,5,-10,32,-30, 
  /* [5][0][][] */ 8,-16,-10,18,17,-30,50,-31,-3,-47,-18,-3,-6,22,1,28,-8,0,13,-2,23,13,-49,76,2,-21,13,-98,3,38,18,29,-4,-2,6,-44,24,8,-1,1,-8,1,23,-26,-1,16,6,-13,-12,-15,7,-11,-14,-27,-12,-54,-1,19,-21,16,70,26,-6,30,-2,54,11,81,-6,97,17,37,5,11,-4,57,-32,-8,11,7,-8,-19,-5,19,-10,13,-12,127,9,34,-6,-9,3,23,-55,25, 
  /* [6][0][][] */ 19,-70,13,-36,-35,2,38,5,21,-10,-26,-76,-20,-2,-23,35,13,-8,0,2,-40,37,8,10,-24,-17,-9,-13,-6,19,49,-7,57,7,47,8,-13,-20,28,-91,-15,85,6,-36,13,-1,-16,24,-10,38,-32,70,-20,-52,-9,-4,-3,-50,-4,8,2,76,31,-71,32,-27,-1,-15,-15,7,127,9,-47,11,-21,14,-79,4,20,-8,30,28,17,-7,-27,2,38,16,24,22,34,-36,-17,5,-33,-2, 
  /* [7][0][][] */ -8,127,43,14,113,47,50,-46,-16,-37,30,-24,-11,24,23,34,11,-43,9,36,33,-30,37,17,-5,-1,18,10,34,-11,27,22,46,-3,-46,24,23,1,5,76,-43,30,25,18,-9,0,26,-19,-23,-15,28,18,16,-38,-30,50,41,9,-13,0,4,-21,-7,-1,-50,73,-37,-81,-14,-29,-2,71,-26,-23,16,0,54,71,47,-20,-44,-41,-10,-15,-16,49,-3,-1,-8,44,-47,-37,-49,-5,25,8, 
  /* [8][0][][] */ 5,-5,48,24,-127,-36,48,-23,26,75,58,8,-9,13,25,8,-35,16,9,0,-44,6,-108,75,9,-41,57,-15,15,13,5,41,63,-20,-19,-10,-33,-10,27,22,4,-25,38,-1,-41,4,53,6,-96,12,14,32,-60,-35,-31,47,7,-44,-86,-12,14,-9,-17,-7,18,78,-6,-39,6,-9,-36,-18,43,44,49,-11,-23,-28,-15,23,-69,3,-24,12,25,30,62,45,30,-22,58,42,3,7,29,21, 
  /* [9][0][][] */ 13,-110,-19,33,92,90,-44,-15,25,-40,110,114,-30,-7,101,-95,26,-31,-14,4,-56,-72,44,-5,-34,25,-10,36,-22,6,-7,-7,7,32,-127,25,0,32,-10,84,31,-75,-31,61,-1,-45,-75,-34,28,25,-12,-99,62,25,-10,-52,11,90,-17,-2,10,-90,-23,123,-101,-13,18,-24,7,21,-67,-88,66,-17,-3,22,69,-78,28,5,-4,-20,12,43,5,-74,35,-9,-1,-47,-57,41,-67,-5,-12,-56, 
  /* [10][0][][] */ -52,-16,-29,-42,-17,-7,70,-23,43,19,20,22,38,-9,-5,-1,-5,21,-24,-8,-7,32,10,23,-12,-21,18,-127,28,-37,64,-36,8,16,-2,7,-9,23,7,-9,8,-26,31,-50,17,15,28,13,-1,39,-26,-9,-37,-25,-7,-51,13,15,-2,-38,36,29,-4,6,-33,87,-21,-25,7,-22,-1,-15,-35,-6,27,54,-5,52,-14,14,-23,-4,3,23,4,-16,-5,117,0,12,3,7,23,-31,43,-27, 
  /* [11][0][][] */ -91,17,1,12,20,-73,-6,-13,-36,-10,-17,7,36,22,-18,1,44,1,-66,-42,11,0,-15,10,64,-5,65,2,-16,34,-31,24,-12,22,-11,4,-13,-8,46,0,-21,7,7,-6,85,37,77,21,55,44,-12,41,3,-61,21,-3,-76,-9,-34,-37,7,14,0,20,-3,-25,25,14,18,16,1,40,-31,13,34,-2,-17,94,-127,59,-36,-7,-75,-70,120,26,45,-7,32,69,-41,-63,-30,59,-28,6, 
  /* [12][0][][] */ -8,-11,-39,-1,63,27,-2,-3,-25,16,32,3,1,-8,31,-8,-29,-11,10,-25,-8,-22,-42,41,-21,57,-24,104,-37,28,-35,8,-9,34,17,18,-13,-2,-3,10,2,-23,-13,12,-12,-12,13,17,-6,-10,5,-31,-12,6,-19,-15,-12,-19,-2,13,-21,-47,-8,40,44,-80,9,47,-35,-127,-9,51,7,10,-4,81,11,-26,-4,3,-5,14,-40,8,3,-10,-3,-50,-21,-4,16,1,-31,36,-12,9, 
  /* [13][0][][] */ -66,57,-3,-11,-62,4,-9,21,-39,-27,52,27,67,6,-37,11,-14,42,-52,-9,26,-26,62,-64,65,43,-16,-6,-1,-38,-54,-98,-102,-31,-12,-4,-5,39,34,-4,-36,81,-11,19,35,-15,-8,4,49,-27,30,61,68,-68,83,-1,-5,45,35,-1,-8,13,-11,10,-9,-29,0,5,25,6,19,-127,27,-41,-71,3,59,31,-43,-48,81,-22,-8,-17,38,-44,82,-9,-44,-19,-8,26,26,-45,-26,-7, 
  /* [14][0][][] */ -30,20,-21,-59,28,10,-18,41,-97,6,29,23,-38,-63,-82,-31,-79,-9,63,3,39,-10,20,-114,-28,33,-52,-23,7,-29,-17,-35,-71,-28,26,-2,-16,8,-6,8,12,78,-83,-4,-62,2,5,6,127,-31,30,-22,41,53,-103,17,-22,23,-111,9,-9,7,44,27,5,28,6,-2,-40,16,56,23,43,-12,-32,30,55,-88,-32,-92,10,-32,12,44,37,-76,-44,2,-52,7,44,54,21,24,22,-24, 
  /* [15][0][][] */ -20,-66,-9,-36,0,5,8,-58,-23,18,2,-34,37,-8,46,-12,-94,4,-23,24,-17,13,-72,-37,-11,-9,-7,21,-18,-10,65,-85,-4,29,11,11,-2,24,-92,1,23,-68,-2,27,-11,-48,55,28,52,10,-17,-127,-14,46,-4,38,32,-5,-11,43,17,4,38,-18,1,-3,-17,0,-31,16,2,31,-43,-11,0,-35,-29,-8,2,9,-7,46,-14,71,-16,-46,-27,-29,-41,64,26,78,-34,-5,1,-13, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant36_scale = { 16, { 0.039656225591897964, 0.017558122053742409, 0.010655601508915424, 0.011542655527591705, 0.017065778374671936, 0.017730457708239555, 0.021345341578125954, 0.013657975010573864, 0.014601324684917927, 0.01136627234518528, 0.034144744277000427, 0.025186585262417793, 0.018200187012553215, 0.010646558366715908, 0.026051808148622513, 0.021289044991135597, } };
const TfArray<16, int> quant36_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int32_t tensor_data37[16] = { -10158, 18267, -19059, -2895, -9996, 10634, 25675, -56254, -2835, 15489, 20208, 14119, -4931, 15940, -2868, 8086, };
const TfArray<1, int> tensor_dimension37 = { 1, { 16 } };
const TfArray<16, float> quant37_scale = { 16, { 0.0009330876637250185, 0.00041313227848149836, 0.00025072004063986242, 0.00027159191085956991, 0.00040154773159883916, 0.00041718725697137415, 0.00050224334700033069, 0.00032136411755345762, 0.00034356059040874243, 0.00026744170463643968, 0.00080340576823800802, 0.00059262552531436086, 0.00042823969852179289, 0.00025050726253539324, 0.000612983712926507, 0.00050091871526092291, } };
const TfArray<16, int> quant37_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[96*1*1*16] = { 
  /* [0][0][][] */ -27,88,-9,-127,-57,-33,-31,-63,-22,19,4,89,15,-67,-22,51, 
  /* [1][0][][] */ -46,28,-67,-14,-31,-42,16,-92,61,49,-81,18,6,5,60,-127, 
  /* [2][0][][] */ 4,22,-40,37,42,33,-35,-45,127,-29,11,24,-14,73,-75,12, 
  /* [3][0][][] */ 47,-66,-1,-112,4,-10,-2,-1,121,10,70,46,-16,40,14,127, 
  /* [4][0][][] */ -65,39,8,47,9,-15,-8,33,5,26,20,-21,-127,-6,-12,19, 
  /* [5][0][][] */ 11,77,95,14,16,84,-103,96,-84,100,-45,-41,46,-49,-127,-2, 
  /* [6][0][][] */ 50,-60,127,-127,44,7,-34,111,-75,-98,72,-27,-2,95,-34,86, 
  /* [7][0][][] */ 32,124,-36,-67,109,18,-5,-48,127,94,-30,7,34,-31,73,63, 
  /* [8][0][][] */ 12,-73,8,-73,27,-44,9,-60,30,63,61,-5,25,127,73,62, 
  /* [9][0][][] */ 7,-29,0,127,36,-9,35,-53,-51,109,37,-16,-11,-58,-9,-8, 
  /* [10][0][][] */ -2,27,-40,-127,6,3,2,28,38,-24,29,-31,-22,-42,-15,25, 
  /* [11][0][][] */ -9,21,22,-14,83,-26,86,-56,-89,33,-3,32,6,127,-65,-31, 
  /* [12][0][][] */ 61,-14,-124,-11,21,-75,21,37,14,66,-90,-38,-32,127,3,50, 
  /* [13][0][][] */ -18,9,-28,10,4,-127,-9,19,3,-9,6,-4,12,-13,12,12, 
  /* [14][0][][] */ 36,-32,116,-52,64,5,-127,-107,-24,-66,22,41,15,-74,-18,-53, 
  /* [15][0][][] */ -59,23,-10,-42,2,2,127,59,-14,44,82,-2,11,72,47,-7, 
  /* [16][0][][] */ 23,76,127,117,1,32,121,79,-98,25,-55,-6,15,0,1,-96, 
  /* [17][0][][] */ -41,-110,-13,28,-65,-22,-65,15,-127,-35,9,-53,-3,40,63,-34, 
  /* [18][0][][] */ 0,41,-1,71,31,2,7,-8,67,49,-25,-32,18,127,58,28, 
  /* [19][0][][] */ -4,-36,36,-5,93,17,-112,-70,-89,-85,-27,-127,-49,-55,14,-35, 
  /* [20][0][][] */ 98,-27,-60,-39,21,-114,-9,8,-65,25,-127,-28,37,3,37,8, 
  /* [21][0][][] */ 75,-24,90,-12,-14,1,-27,100,-7,-87,42,34,5,127,42,83, 
  /* [22][0][][] */ -15,33,-35,127,-49,8,110,55,-5,45,5,38,-5,0,24,-5, 
  /* [23][0][][] */ 55,-5,70,-75,66,12,10,69,33,13,23,-7,28,-22,-127,6, 
  /* [24][0][][] */ -127,39,11,-20,2,91,14,-11,-5,15,98,-18,-72,23,63,-24, 
  /* [25][0][][] */ 32,26,19,27,17,14,75,-48,-7,-127,-16,-17,-14,-29,8,18, 
  /* [26][0][][] */ -43,-1,-1,4,-40,-12,-48,-32,-123,-41,0,-49,5,127,-37,61, 
  /* [27][0][][] */ -6,30,9,65,37,-30,-17,-35,54,7,-18,-4,3,127,-7,14, 
  /* [28][0][][] */ 18,81,51,62,127,-8,22,40,-88,-20,-56,-27,20,96,48,-33, 
  /* [29][0][][] */ -9,-6,2,10,23,-4,6,38,-19,-17,-15,-127,5,-15,-10,9, 
  /* [30][0][][] */ -21,79,-48,68,-37,-20,35,-127,-44,50,-25,-7,57,32,82,84, 
  /* [31][0][][] */ -34,-12,-15,-60,-11,3,-51,-101,26,94,-8,-127,-26,-45,2,19, 
  /* [32][0][][] */ -127,-83,-17,51,53,40,-8,4,-6,-46,-99,42,71,-2,69,61, 
  /* [33][0][][] */ -14,-39,-31,-10,-80,-8,-73,-3,64,5,17,-56,28,-113,127,28, 
  /* [34][0][][] */ 41,-10,64,25,43,19,-45,88,-90,-51,73,20,17,-14,-22,127, 
  /* [35][0][][] */ -31,51,-79,24,-6,-12,47,-114,91,105,-83,11,9,-9,72,-127, 
  /* [36][0][][] */ -25,39,29,98,15,22,127,10,-19,15,-22,5,-19,9,-67,-55, 
  /* [37][0][][] */ 3,-11,12,-67,-8,-7,-32,-47,-74,-11,16,-8,-9,-127,57,-37, 
  /* [38][0][][] */ 43,86,-9,-55,127,-10,31,-40,112,71,-15,-11,15,-28,53,14, 
  /* [39][0][][] */ -30,62,-12,-127,-19,9,-41,38,48,-72,-19,-13,17,81,44,30, 
  /* [40][0][][] */ 4,-17,14,-82,-5,-11,5,-41,-127,6,2,-25,-10,-124,78,-67, 
  /* [41][0][][] */ -7,-16,-44,-15,7,-26,19,-6,-31,15,-55,-3,-127,5,15,28, 
  /* [42][0][][] */ 127,91,-27,-24,-77,-63,-34,-52,1,13,82,-68,-66,50,115,-112, 
  /* [43][0][][] */ -10,109,-73,2,47,-22,127,-36,62,94,-48,25,35,-113,-89,-64, 
  /* [44][0][][] */ -25,-10,11,-38,59,3,-94,-127,-17,-14,-1,-5,0,-29,69,-55, 
  /* [45][0][][] */ -14,48,-127,-43,41,-62,17,-70,5,19,-10,-105,29,-22,57,-11, 
  /* [46][0][][] */ 9,-1,-22,-83,-17,14,21,-28,-118,-18,15,22,-10,-127,68,-33, 
  /* [47][0][][] */ 19,51,22,-10,127,-12,-34,17,-51,45,-2,13,4,5,110,-23, 
  /* [48][0][][] */ -127,-74,-19,34,74,19,6,-22,-2,-23,-124,33,61,4,82,53, 
  /* [49][0][][] */ 29,8,109,98,121,7,33,43,-117,-37,-27,-81,0,127,16,-57, 
  /* [50][0][][] */ 29,-7,-75,7,22,-127,-41,-2,-30,-5,2,-39,30,-17,-21,-3, 
  /* [51][0][][] */ 16,36,49,16,30,5,2,27,-127,58,12,-114,8,-105,-31,101, 
  /* [52][0][][] */ 3,41,13,35,45,-2,28,30,79,76,-7,-53,18,127,62,13, 
  /* [53][0][][] */ -4,-52,-28,-14,-91,6,-75,-13,52,25,18,-56,29,-127,122,15, 
  /* [54][0][][] */ 42,-21,-60,-7,127,79,-124,-47,-80,-1,-39,-87,13,-44,-3,-36, 
  /* [55][0][][] */ 43,-1,4,10,38,-37,-64,-127,-31,-68,-47,11,-1,-25,19,-5, 
  /* [56][0][][] */ -18,18,22,-17,-1,-20,-97,67,-18,127,-14,-15,28,4,-3,5, 
  /* [57][0][][] */ -5,19,-40,-29,-60,-57,118,86,-31,18,-13,-10,34,21,127,1, 
  /* [58][0][][] */ 45,21,-127,32,101,104,-34,56,-106,-38,-5,8,-38,27,-4,-15, 
  /* [59][0][][] */ -100,59,107,27,-74,-64,121,127,23,14,27,-18,14,13,69,1, 
  /* [60][0][][] */ 9,-4,-56,5,23,-127,-32,7,-14,-11,-7,-20,29,-10,-6,15, 
  /* [61][0][][] */ 18,-4,20,127,80,26,23,9,-100,1,10,40,-7,14,34,-55, 
  /* [62][0][][] */ -53,127,20,-54,-28,-8,-65,57,-19,-66,-78,-60,-7,-97,-50,-41, 
  /* [63][0][][] */ -40,24,-21,127,-73,11,-70,-28,-53,-22,-31,-33,32,74,37,45, 
  /* [64][0][][] */ 9,6,4,41,9,10,-11,69,30,2,-10,-46,-18,-127,51,-3, 
  /* [65][0][][] */ -11,-48,15,-127,32,-42,66,-46,-13,49,11,-105,-21,6,19,-52, 
  /* [66][0][][] */ 29,-11,69,-21,-7,3,-2,106,11,-58,62,30,-7,127,18,77, 
  /* [67][0][][] */ -2,57,-11,-127,-8,1,-66,33,82,-103,-35,-14,34,79,78,41, 
  /* [68][0][][] */ -38,33,127,5,4,-2,-4,4,-48,-19,-18,-36,22,-26,90,-30, 
  /* [69][0][][] */ 127,79,0,-4,-82,-31,-36,-37,5,21,98,-69,-64,55,68,-98, 
  /* [70][0][][] */ 44,0,-61,-18,-40,20,58,127,-32,91,-27,15,11,70,-21,17, 
  /* [71][0][][] */ 4,-2,-2,9,-1,-78,-9,20,-39,13,-81,1,-127,2,42,50, 
  /* [72][0][][] */ 11,15,-127,12,3,10,28,92,-41,-23,10,0,16,15,-6,2, 
  /* [73][0][][] */ -44,14,41,-3,42,-40,-74,-127,22,-79,34,-20,15,-39,45,-14, 
  /* [74][0][][] */ 5,41,39,127,24,3,-83,94,-66,25,-51,40,17,-112,31,-77, 
  /* [75][0][][] */ -14,30,-51,8,20,-9,15,-23,123,17,-21,-15,14,127,-37,3, 
  /* [76][0][][] */ -2,-14,-1,23,2,-12,-11,62,16,-24,-16,-127,-5,-2,6,16, 
  /* [77][0][][] */ -14,14,-10,127,-51,7,96,118,17,40,-3,33,-24,-13,-11,-28, 
  /* [78][0][][] */ 11,9,37,-126,35,-37,-32,33,26,-61,5,-2,31,127,20,44, 
  /* [79][0][][] */ -27,-111,-87,-71,-79,-5,18,-92,127,16,13,51,30,43,64,-45, 
  /* [80][0][][] */ -40,-7,111,-127,20,-29,43,-124,-74,57,-26,-113,59,100,119,-71, 
  /* [81][0][][] */ -50,50,-127,29,72,-123,-21,53,-5,-44,53,-12,30,6,13,2, 
  /* [82][0][][] */ 127,-10,-11,18,14,-112,-31,14,-14,-13,-112,-9,116,13,0,34, 
  /* [83][0][][] */ -41,67,-106,-93,-35,-26,37,-127,56,37,-53,-119,16,51,62,104, 
  /* [84][0][][] */ -36,41,73,-35,13,-17,56,-127,-43,46,-27,-77,38,54,67,4, 
  /* [85][0][][] */ -80,127,23,-116,-77,-29,-20,-1,-51,2,-65,31,11,-11,-98,-33, 
  /* [86][0][][] */ -4,-8,-24,-3,-32,-31,127,18,2,-25,6,12,-1,26,73,-27, 
  /* [87][0][][] */ -21,-41,3,-117,9,-30,52,-14,-5,19,-13,-127,-19,0,9,-42, 
  /* [88][0][][] */ 97,-33,45,-9,17,-118,-19,12,-65,28,-127,-66,23,27,77,-11, 
  /* [89][0][][] */ 20,-22,-37,-39,31,-6,-23,-8,-48,11,21,-66,127,-4,18,-36, 
  /* [90][0][][] */ 1,-46,29,-52,68,1,-59,93,60,-76,-32,-20,-20,124,20,-127, 
  /* [91][0][][] */ -47,-8,-18,-33,14,-22,-34,-100,14,69,-6,-127,-31,-11,-2,3, 
  /* [92][0][][] */ -24,21,39,14,0,-127,14,2,-3,-24,3,-12,-1,-23,18,3, 
  /* [93][0][][] */ 34,-24,127,-7,-58,54,24,-30,-28,32,-75,-27,-20,-1,34,-3, 
  /* [94][0][][] */ 29,-5,-17,-22,32,0,-10,-7,-36,-12,8,-61,127,-29,26,-36, 
  /* [95][0][][] */ 127,93,-3,38,-88,-2,-67,-1,-26,-22,86,-47,-44,32,76,-59, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant38_scale = { 96, { 0.00074693321948871017, 0.0011105301091447473, 0.0008447765139862895, 0.00085342174861580133, 0.0011608535423874855, 0.00087223364971578121, 0.00047986971912905574, 0.00085637520533055067, 0.00054971902864053845, 0.0010953501332551241, 0.00057483999989926815, 0.00074357108678668737, 0.00068963918602094054, 0.0039125042967498302, 0.00048431995674036443, 0.00056258420227095485, 0.00033971306402236223, 0.0006426965119317174, 0.0012422672007232904, 0.00076180929318070412, 0.00041932860040105879, 0.00026239125872962177, 0.00044204411096870899, 0.00026921153767034411, 0.00058628857368603349, 0.0013637625379487872, 0.0017751072300598025, 0.00098293542396277189, 0.00065969827119261026, 0.0011764381779357791, 0.00059253955259919167, 0.00093437841860577464, 0.00059709168272092938, 0.00064970564562827349, 0.00089291407493874431, 0.00073568295920267701, 0.00057264254428446293, 0.00056432152632623911, 0.00090466899564489722, 0.00094667542725801468, 0.00038732032408006489, 0.0015608862740918994, 0.00070125272031873465, 0.00052921281894668937, 0.0012067202478647232, 0.00066925544524565339, 0.00069915037602186203, 0.00084893970051780343, 0.00080992962466552854, 0.000629568996373564, 0.0010346435010433197, 0.00047472325968556106, 0.001435111160390079, 0.00057638174621388316, 0.00098910345695912838, 0.001058336696587503, 0.0014996577519923449, 0.0007848050445318222, 0.00085863878484815359, 0.00059537816559895873, 0.0029581158887594938, 0.0012227108236402273, 0.00057591713266447186, 0.0010500166099518538, 0.0013648623134940863, 0.00069968332536518574, 0.00027925128233619034, 0.00056597008369863033, 0.0011626685736700892, 0.00099100836087018251, 0.0005994641687721014, 0.00073416356462985277, 0.0019723088480532169, 0.00079619995085522532, 0.00072151271160691977, 0.00050083629321306944, 0.00078769883839413524, 0.00030279092607088387, 0.00029216415714472532, 0.00044211052590981126, 0.00035165698500350118, 0.0005138305714353919, 0.00062814378179609776, 0.00055484782205894589, 0.00036279353662393987, 0.00075216783443465829, 0.0016092609148472548, 0.00054927420569583774, 0.00040347449248656631, 0.0016932756407186389, 0.00075349642429500818, 0.00075269758235663176, 0.00082218489842489362, 0.0014003338292241096, 0.0011253703851252794, 0.00049300474347546697, } };
const TfArray<96, int> quant38_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int32_t tensor_data39[96] = { -2363, 3979, 7920, 2831, -2528, -4680, 19356, 2335, 3001, -1680, 9647, -195, -10370, 2031, 17822, 5711, 15323, 6338, -4368, -6215, 4193, 28947, 19425, 17387, 1012, 990, 4697, 3070, 2302, -4671, 6980, -2294, -301, 5014, 53, 965, 9300, 5304, -1913, 5234, 9216, 4642, 6038, 12262, 4464, 4256, 2000, 7144, 4681, -5822, -4229, 521, -293, -1519, 2251, -104, 191, -912, -5034, 8693, -715, 1508, -1318, -2053, -3819, 7662, 21684, 2007, -2738, 975, 1926, 2018, 1922, -1439, 644, 12139, -484, 17195, 17473, -1156, 11692, 1870, -264, 1291, 14092, 8855, 4092, 1507, 5050, 3374, -382, -7410, 737, -2073, -1549, -2327, };
const TfArray<1, int> tensor_dimension39 = { 1, { 96 } };
const TfArray<96, float> quant39_scale = { 96, { 0.00026702322065830231, 0.00039700648630969226, 0.00030200151377357543, 0.00030509210773743689, 0.00041499675717204809, 0.00031181721715256572, 0.0001715499529382214, 0.00030614793649874628, 0.0001965205738088116, 0.00039157975697889924, 0.00020550114277284592, 0.00026582129066810012, 0.00024654102162458003, 0.0013986920239403844, 0.00017314088472630829, 0.00020111979392822832, 0.00012144496577093378, 0.00022975936008151621, 0.00044410154805518687, 0.00027234130539000034, 0.00014990694762673229, 9.3802977062296122e-05, 0.00015802757116034627, 9.6241179562639445e-05, 0.00020959392713848501, 0.000487535260617733, 0.00063458801014348865, 0.00035139231476932764, 0.00023583736037835479, 0.00042056816164404154, 0.0002118286065524444, 0.00033403353882022202, 0.00021345596178434789, 0.00023226506891660392, 0.0003192103176843375, 0.00026300133322365582, 0.00020471557218115777, 0.00020174086967017502, 0.00032341261976398528, 0.00033842961420305073, 0.00013846422370988876, 0.0005580055876635015, 0.00025069277035072446, 0.00018918975547421724, 0.00043139376793988049, 0.00023925399000290781, 0.00024994122213684022, 0.00030348979635164142, 0.0002895439974963665, 0.0002250663674203679, 0.0003698775835800916, 0.00016971013974398375, 0.00051304185763001442, 0.00020605231111403555, 0.00035359733738005161, 0.00037834772956557572, 0.00053611682960763574, 0.00028056211885996163, 0.00030695716850459576, 0.00021284339891280979, 0.0010575050255283713, 0.00043711028411053121, 0.00020588621555361897, 0.00037537334719672799, 0.00048792842426337302, 0.00025013173581101, 9.9830314866267145e-05, 0.00020233022223692387, 0.00041564562707208097, 0.00035427833790890872, 0.00021430410561151803, 0.0002624581684358418, 0.00070508616045117378, 0.00028463572380132973, 0.00025793557870201766, 0.00017904535343404859, 0.00028159664361737669, 0.00010824557102750987, 0.00010444657527841628, 0.00015805131988599896, 0.00012571482511702925, 0.00018369071767665446, 0.00022455686121247709, 0.00019835408602375537, 0.00012969606905244291, 0.00026889456785283983, 0.00057529914192855358, 0.00019636156503111124, 0.00014423920947592705, 0.00060533382929861546, 0.00026936951326206326, 0.00026908394647762179, 0.00029392517171800137, 0.000500609225127846, 0.00040231179445981979, 0.00017624563770368695, } };
const TfArray<96, int> quant39_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[32*1*1*96] = { 
  /* [0][0][][] */ 12,63,39,-74,-52,29,4,77,-12,-23,-106,-92,-94,121,-47,64,45,95,37,0,-27,-90,-31,31,98,-100,9,117,64,-93,75,7,-64,92,31,-63,-21,16,-75,-9,-93,-35,109,-64,73,-10,-76,109,-88,95,-109,26,-15,79,14,61,-52,-87,22,39,-16,94,43,-97,83,-107,-91,60,57,-77,1,127,-50,45,-32,116,-42,-48,-22,-20,-99,58,77,39,-36,-60,-50,-43,38,45,34,61,-86,-93,-49,52, 
  /* [1][0][][] */ 67,10,72,39,37,-56,4,115,30,68,-72,58,-106,-92,30,-77,-49,-25,18,-29,106,84,-79,-67,37,-7,-25,-59,88,32,-16,-53,-76,-78,-89,-75,37,-56,-36,20,11,109,-5,32,44,7,-30,42,25,-103,-9,-37,-10,-102,-41,-87,49,34,113,11,63,-72,-28,-9,127,-12,0,93,79,88,45,124,-1,37,65,36,69,-65,118,-21,-73,108,-58,82,35,26,-106,35,-43,-57,62,-24,-26,21,42,17, 
  /* [2][0][][] */ 0,-73,-88,-127,-44,4,73,-7,23,-52,-70,-54,58,78,-76,-119,-99,37,-25,25,-93,-55,29,25,-84,67,-42,-46,-23,-29,-89,27,50,-73,60,1,-81,18,-93,67,57,-34,112,76,-70,-23,48,24,-19,-43,18,92,-77,-84,-3,-82,-46,27,70,114,106,81,-73,103,101,91,-77,-86,-11,15,71,-20,39,-1,-24,-72,101,118,-106,-77,-93,117,88,28,-78,35,43,29,76,79,91,112,-55,-20,78,76, 
  /* [3][0][][] */ -73,98,67,-72,91,94,82,72,110,16,42,-47,95,43,112,113,-110,77,-56,97,-76,82,-71,9,106,79,-90,25,53,24,-39,93,-87,28,26,-93,-86,-38,-82,-46,-84,-36,-58,23,-65,-106,-30,-27,-46,94,-36,-104,12,40,93,-57,-82,-93,58,-85,-86,36,-88,-35,-1,87,-45,-23,-39,-37,85,7,83,87,-47,-65,-127,-46,86,-47,61,98,-83,-93,78,-98,100,-90,-35,-109,102,84,-83,-45,17,-32, 
  /* [4][0][][] */ -96,26,85,-11,72,35,-25,-36,13,73,-101,-55,-80,92,30,-102,86,38,-40,-74,-86,76,-109,-24,-34,-113,85,42,14,-127,112,27,-110,42,-46,-50,99,-17,-103,-100,104,92,-97,-96,-16,87,-38,-38,112,-27,106,110,84,-115,5,42,-102,-32,124,-56,76,-20,-13,74,-43,27,-110,-81,22,93,37,-7,-56,-9,34,-67,-30,86,-39,34,29,-108,59,-3,50,115,10,-66,-27,-12,89,52,92,-8,-105,-108, 
  /* [5][0][][] */ -104,119,-46,-55,40,-12,-47,69,-15,-85,58,34,-81,38,114,109,-117,127,114,-3,119,10,-53,113,-119,52,-36,-57,-25,30,70,5,-68,74,68,61,110,-60,-54,-39,84,-2,-13,-59,112,124,10,-6,32,114,89,53,-85,-43,57,-33,120,-50,-49,74,60,73,-3,82,87,-57,49,58,112,-66,42,12,-109,96,27,-90,-53,66,36,-4,83,116,-89,-42,54,-30,-96,-9,91,116,-36,121,-16,109,8,108, 
  /* [6][0][][] */ 100,-8,19,-90,-91,5,61,-76,12,90,38,115,34,-60,-8,108,-48,90,34,84,-85,114,98,48,-65,56,-106,-89,-30,-97,6,39,-98,19,80,85,-83,-35,28,51,-73,45,81,22,-92,84,-75,-14,59,101,9,-6,-67,-101,-39,-61,-63,-12,20,85,52,-22,92,2,127,89,-12,38,-3,-80,-25,-12,77,-42,110,111,-39,63,-41,-82,26,-13,-5,-103,79,6,-1,113,3,-83,-88,-47,-71,16,108,-87, 
  /* [7][0][][] */ 84,36,-51,-108,102,-31,-22,-55,19,-79,-5,-15,-23,102,93,51,70,1,-41,56,71,-83,-13,-49,95,-51,56,92,-76,-5,-9,17,-107,-35,76,-33,100,4,-10,-83,-90,36,-52,72,15,-52,-72,-45,56,-18,-4,104,-42,38,56,43,45,-93,-18,-98,28,-72,-38,-48,-10,-47,-95,-88,51,-89,-127,19,-95,68,-33,56,-57,-45,-62,-9,-88,36,11,63,-51,-65,-19,-66,49,105,105,-63,41,-60,89,-100, 
  /* [8][0][][] */ -55,-47,-96,-1,68,20,-19,-77,86,-92,115,-89,-21,-91,-104,-5,28,74,88,-66,101,60,95,-46,-65,-99,14,-84,-64,-93,-90,4,-40,-2,-72,115,-99,-90,-31,-68,-15,27,42,-10,-3,-47,-18,95,67,92,-41,-15,113,20,7,-87,10,-8,9,18,-99,-3,-97,100,-3,-31,10,-65,-73,34,-95,59,43,84,127,87,88,-1,-10,-26,40,94,2,66,73,-48,-23,72,65,59,-61,69,-104,119,116,-47, 
  /* [9][0][][] */ -34,-42,21,68,22,49,77,30,9,43,62,67,103,49,-33,-25,-12,-62,-62,-81,-92,75,18,-25,-77,-62,-46,49,58,-107,-31,47,-94,-67,111,-30,-29,-7,-69,-67,96,82,-3,5,33,51,22,-25,-32,-32,-92,-57,-102,23,18,65,-8,-75,0,3,-3,-71,27,76,-127,70,65,56,88,-63,-111,9,44,14,53,-105,103,-68,10,-47,-112,-41,76,-80,53,-70,-89,13,-74,83,26,11,-82,22,26,57, 
  /* [10][0][][] */ -95,41,-84,-102,-57,74,-127,-110,80,-115,86,73,-11,29,71,-6,109,10,-91,33,-16,-66,-46,84,35,108,-34,-34,-116,-74,-16,-118,60,33,111,-120,117,-89,34,114,83,26,29,58,-20,25,-8,-9,-94,118,104,111,102,-107,89,54,12,-12,58,-13,76,60,96,48,-52,105,-3,52,-3,-16,71,22,-102,-116,17,56,69,97,79,5,-5,38,0,23,12,74,-89,24,-19,33,-59,89,49,67,15,-22, 
  /* [11][0][][] */ 78,64,-73,-83,102,-1,-36,-91,-83,46,48,-10,38,-64,57,-76,-112,81,-9,-46,-37,-37,68,-78,-95,103,73,94,9,37,2,52,64,89,-114,-81,9,125,-50,-63,58,-106,111,-111,93,33,-96,-17,61,85,-87,97,63,-69,-41,-91,-11,85,-115,84,-37,1,126,-45,79,-21,98,13,111,100,-52,33,-100,-32,23,-99,-6,76,-71,-17,-84,-18,-113,108,8,-73,-43,-15,-70,53,-30,-52,97,33,127,13, 
  /* [12][0][][] */ -62,-35,-73,106,18,-20,-47,-79,-19,-1,-40,63,-64,-77,-41,81,42,-40,22,109,-96,-27,64,51,15,92,-79,0,105,-76,69,62,38,-36,3,-83,14,-78,64,64,84,82,49,-72,31,-17,-56,84,-87,105,-4,55,-54,-57,79,40,-4,-45,-92,-69,46,-19,127,-9,-26,3,8,-62,-74,-95,42,-24,-104,-60,-17,-17,-109,-14,82,-42,28,69,84,-24,66,-48,5,-63,-73,-85,8,12,-45,-86,-92,94, 
  /* [13][0][][] */ 54,48,72,-62,109,19,35,-60,32,-102,35,6,7,92,37,70,68,64,19,88,114,-15,-13,-81,87,-84,10,-67,26,-110,-44,3,2,-95,10,-9,53,-100,74,53,-13,-59,73,73,62,-6,66,66,-74,75,-92,-6,-33,-82,5,98,48,-60,87,-66,-107,-22,78,-19,-79,38,-38,-88,-73,-60,-108,104,-56,-2,98,-28,-29,82,-11,-58,84,42,-10,127,100,-41,-108,83,-40,-50,31,-27,69,113,-24,-77, 
  /* [14][0][][] */ -48,-63,94,60,69,-62,20,-6,-7,78,-30,-73,-5,116,-24,37,-88,-27,-16,-96,-1,42,-48,-36,-44,-20,70,30,80,-97,79,-42,-41,98,123,26,34,78,-79,-91,110,121,119,27,83,-69,-1,-45,-105,15,-36,-63,-10,-116,97,-103,36,-94,-21,-98,-91,-94,28,21,5,65,9,-9,-102,-11,39,-58,-103,-71,65,-11,-88,-9,72,2,123,-29,127,39,-75,-60,-62,80,61,-6,-70,-34,-14,-97,-68,-57, 
  /* [15][0][][] */ 21,57,1,-63,-88,120,18,61,-111,-39,113,-30,-16,-49,-41,-36,-30,102,-105,31,-19,-85,-58,-23,2,-7,110,125,-10,-80,-120,37,62,108,-43,-24,-28,112,-25,-87,-58,127,115,-62,93,62,-77,-90,35,-28,-55,-91,-84,-1,46,23,62,-28,121,-48,-113,-93,-93,-56,-39,40,-13,-68,-1,-75,-80,26,70,64,4,90,-26,103,-101,-29,-17,-66,-44,-48,-45,-34,109,-25,75,-98,-82,111,6,-38,119,-79, 
  /* [16][0][][] */ 1,19,-98,119,85,-69,103,104,-40,53,87,-68,-47,89,-120,-27,32,85,-55,-25,-119,-20,-103,15,114,-74,-68,25,-50,104,112,40,-91,-44,27,6,-15,92,-127,66,47,37,82,-58,-99,-12,-102,-62,-30,56,101,74,-32,-115,55,4,45,95,-47,-60,45,-26,3,61,-19,32,72,-42,2,-50,80,22,83,-1,40,-80,88,-53,-95,-50,-31,33,-14,-102,93,-62,0,-110,108,-96,97,-103,50,31,71,-90, 
  /* [17][0][][] */ -23,91,-110,-32,-26,51,-44,104,29,-27,97,-27,-43,102,33,-64,25,79,-35,70,22,-15,-57,-16,-109,8,-36,-75,-43,36,64,-95,67,-37,-40,42,33,-52,-15,44,-39,113,-27,-80,107,24,-77,-91,37,-127,-24,-111,-84,14,49,32,-60,76,-36,-63,98,92,71,87,-46,35,-92,75,-60,-68,13,-17,-40,-28,0,45,-115,-58,107,-99,-57,-4,98,-44,75,38,-44,101,19,119,-37,63,-92,-59,78,-32, 
  /* [18][0][][] */ 74,-107,-113,-12,70,41,-110,-94,-50,51,-80,-81,0,103,29,37,25,96,-81,-31,-75,55,27,41,24,-16,41,-98,-16,-127,35,-105,-20,90,110,-60,33,-34,-54,-75,-96,29,118,-60,-17,47,102,-53,96,1,-63,-89,-45,6,-25,41,86,25,-97,66,-96,-22,75,120,3,31,-92,-99,116,-37,-72,97,-103,121,7,118,32,93,-6,-22,-53,-44,-91,103,13,-60,103,25,83,33,-39,120,-86,3,10,-113, 
  /* [19][0][][] */ 64,67,-101,81,118,91,-59,13,96,-30,6,-48,70,83,117,-47,37,-92,-24,120,-83,-80,29,120,68,-10,31,-22,83,34,113,-107,75,-20,-91,85,-106,-20,-56,22,69,41,52,48,-32,51,-103,106,127,32,73,-24,67,-78,92,111,67,8,-77,-44,-38,65,113,-30,108,-8,-73,94,120,-7,-95,15,14,91,24,96,11,87,-79,114,-102,-51,113,-89,45,16,86,-75,-69,-4,-19,17,-20,-38,91,-105, 
  /* [20][0][][] */ -9,-88,-13,62,76,17,85,46,-55,-72,26,10,-31,-86,7,-86,-8,-54,94,43,55,-105,99,-17,-94,121,-78,15,6,-77,-44,6,31,98,87,-55,111,21,-107,21,101,-103,-80,-13,49,18,-38,-41,73,-14,116,-71,-3,85,27,-82,-72,-127,63,18,-37,90,69,65,24,102,36,-80,32,83,-75,21,-92,-88,-39,116,-15,-81,45,-73,18,91,82,-54,59,23,-66,-109,110,13,-115,-86,63,-56,22,67, 
  /* [21][0][][] */ 64,93,75,-66,-16,-58,-67,-38,17,87,13,-86,-8,-37,-77,-87,-41,19,-14,-28,-18,47,79,-65,88,14,100,11,-31,-92,113,53,-28,47,56,81,-118,-62,-90,53,8,56,-23,-18,-30,93,-107,68,91,-65,-56,-66,60,-3,-73,-11,14,-51,70,75,26,-51,2,127,-20,47,-58,49,66,-33,-28,46,-56,-28,-63,2,-49,71,103,75,-3,85,7,38,-81,-55,10,49,-2,50,-50,109,0,-27,98,-15, 
  /* [22][0][][] */ -33,-67,93,-37,-111,-108,112,66,42,-2,-33,31,-71,27,-28,-123,-100,-19,-111,74,43,125,-12,99,-113,44,-88,64,-48,-102,-78,-102,-110,118,53,55,60,-114,-81,-86,-35,-23,-96,16,66,-60,115,-86,-95,-16,-102,83,-102,111,-16,49,114,84,-113,91,-79,-5,-20,4,78,-124,-100,-43,54,97,-95,-68,7,92,-78,-16,-126,-94,61,-41,102,-93,-105,-77,47,89,-48,106,22,104,116,-1,-127,95,98,73, 
  /* [23][0][][] */ -47,5,11,-39,-79,20,61,17,20,-89,58,-116,-106,90,68,-49,33,45,66,27,54,99,61,-5,50,-55,-70,-58,-97,77,-4,127,78,-61,99,-19,-4,112,81,-79,119,47,102,-98,-93,4,-94,107,30,95,-64,-13,-84,118,78,17,45,-13,72,-25,-52,57,85,-106,118,-93,10,-10,105,109,-76,115,100,49,29,-44,-109,19,-95,-23,-105,16,-94,-75,-50,-117,113,-106,-32,-70,-36,-67,9,-46,-67,118, 
  /* [24][0][][] */ -9,93,114,111,62,-4,-102,115,1,-93,-77,85,16,3,-3,-59,-18,45,-64,90,123,-21,-19,38,-23,66,-68,-58,93,115,101,-23,124,-43,-18,-21,22,-38,-70,-81,11,113,-82,51,-41,80,57,-59,-82,-67,21,-17,-62,82,127,-43,68,-45,10,-25,108,54,60,-14,-104,-3,-61,122,73,-95,-5,35,5,-98,2,-35,25,-50,-26,71,70,-42,59,-43,-76,-64,-14,-56,-79,86,-57,-22,-71,-66,79,99, 
  /* [25][0][][] */ -4,4,27,87,-11,52,-58,48,-16,60,77,95,-105,65,93,-57,-8,-20,-104,-32,58,115,7,122,47,-51,-62,-38,64,74,-89,33,-83,-64,127,113,-44,54,-89,100,-82,101,55,54,-15,-83,-87,-94,-45,12,-49,-30,3,-20,-117,-109,25,-10,94,44,-64,127,-86,-19,-85,-72,-55,70,-25,0,82,36,58,34,-5,24,15,34,43,-67,-82,6,-59,14,84,26,-3,30,-106,90,-43,-29,-23,58,76,43, 
  /* [26][0][][] */ 74,-84,-3,-8,78,-117,100,-45,43,-31,-90,7,-39,-72,34,-22,102,7,-87,-82,42,-54,70,90,-1,-34,46,41,23,2,-51,-48,-30,46,46,115,2,89,-127,102,93,4,-33,-97,-11,51,113,9,16,51,104,-21,98,96,59,26,76,2,-57,-18,15,118,-89,-124,43,-32,-109,-38,-10,-54,32,35,-104,-71,-89,-77,-22,23,-25,60,103,18,-56,-27,-15,-45,-11,-97,19,14,87,106,-55,50,43,-44, 
  /* [27][0][][] */ 63,45,-116,118,-42,-49,5,-11,-95,88,-32,-2,-114,75,83,-52,44,-118,-15,-107,-27,57,87,-94,-123,77,-41,51,91,-64,65,-123,110,-91,37,111,113,59,-90,-46,35,58,-26,63,68,-98,109,-75,-23,-67,72,96,113,59,-127,-88,84,-34,-50,9,36,-82,-119,-111,24,114,26,-106,31,-5,32,-110,20,-83,-5,-87,-96,-5,73,24,-64,-90,88,-1,-112,-95,59,-36,112,15,52,109,91,39,58,-106, 
  /* [28][0][][] */ -117,121,-46,80,24,105,-104,-1,60,-58,-98,72,69,-68,24,-102,-69,80,52,100,105,77,11,-85,69,-65,81,120,-49,15,-17,48,-15,22,-39,-55,36,102,-28,123,-90,-24,-2,63,113,113,-13,8,121,6,-127,7,63,-37,33,70,108,41,64,85,46,-27,8,-98,-66,-2,91,-38,-72,62,66,120,-113,65,124,33,67,-42,-8,76,-65,67,67,-17,58,16,-75,-56,-85,22,84,-80,54,63,-6,106, 
  /* [29][0][][] */ 22,-23,36,22,-33,4,21,-121,-61,-36,-57,-90,73,-24,-89,-28,94,96,-76,103,28,-74,-94,-98,92,-70,-108,-53,-52,91,-69,28,-109,121,112,-2,-31,-103,25,-34,115,-58,-23,34,-92,63,-125,0,-38,72,23,45,-88,-16,89,94,43,-21,-70,6,122,106,-81,39,79,-92,-126,40,73,-13,-39,-56,-32,-127,-30,-103,-66,32,-1,67,-8,-48,27,-31,22,-126,-74,94,-18,34,-77,-62,-111,-13,-73,-71, 
  /* [30][0][][] */ -78,-87,-86,-49,76,108,56,12,-72,48,32,57,95,64,-101,-114,98,119,91,13,-5,-75,125,-73,19,60,-25,21,86,-52,15,52,11,-25,22,31,-86,-30,91,-18,-6,-92,-67,-85,88,125,-33,-29,-57,112,-107,-42,-110,-13,105,-96,112,52,22,-2,-48,-103,52,98,127,101,31,73,101,84,115,-74,30,-103,-81,27,62,-25,-3,-42,55,57,110,49,86,-58,68,44,117,42,52,-114,16,84,-66,-64, 
  /* [31][0][][] */ 46,118,74,-38,-75,-18,100,-86,-80,-59,63,-56,-81,-88,94,25,-8,48,-37,25,-27,-41,97,8,70,91,-41,-64,-21,89,56,62,70,34,62,104,51,110,-23,-84,-5,104,-94,38,26,100,46,-9,-114,-27,-43,64,25,-89,-21,-10,-1,39,11,117,-2,-127,114,-119,14,-92,80,-69,-122,34,114,-36,79,-74,-43,59,-8,85,57,-77,-6,-15,-117,-87,-31,79,120,-106,-75,85,40,-27,-54,-44,-117,68, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant40_scale = { 32, { 0.0018903204472735524, 0.0019228277960792184, 0.0017493548803031445, 0.0018966180505231023, 0.0018445379100739956, 0.0017801380017772317, 0.001936212764121592, 0.0020309581886976957, 0.0019323091255500913, 0.0018516319105401635, 0.0017248055664822459, 0.0017656179843470454, 0.0020069018937647343, 0.0019314092351123691, 0.0017733710119500756, 0.001799660618416965, 0.0017950762994587421, 0.0018618101021274924, 0.0018085093470290303, 0.0017592424992471933, 0.0018856237875297666, 0.0021917424164712429, 0.0017739089671522379, 0.0018082181923091412, 0.0018357253866270185, 0.0020644969772547483, 0.0018185866065323353, 0.0017539295367896557, 0.001842562691308558, 0.0017059004167094827, 0.0017882122192531824, 0.0017548659816384315, } };
const TfArray<32, int> quant40_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[32] = { 246, 276, -171, 86, 196, 145, 774, -54, 223, -231, -190, 138, 202, -12, 209, 160, -61, 144, 157, 143, 170, -338, 365, 101, 160, 1007, -126, -21, 101, -118, 272, -121, };
const TfArray<1, int> tensor_dimension41 = { 1, { 32 } };
const TfArray<32, float> quant41_scale = { 32, { 4.4478128984337673e-05, 4.5243006752571091e-05, 4.1161292756441981e-05, 4.4626307499129325e-05, 4.340089435572736e-05, 4.1885599785018712e-05, 4.5557946577901021e-05, 4.778725269716233e-05, 4.5466098526958376e-05, 4.3567812099354342e-05, 4.0583661757409573e-05, 4.1543953557265922e-05, 4.7221223212545738e-05, 4.5444925490301102e-05, 4.1726376366568729e-05, 4.2344956455053762e-05, 4.2237090383423492e-05, 4.3807296606246382e-05, 4.2553161620162427e-05, 4.1393941501155496e-05, 4.4367618102114648e-05, 5.1570412324508652e-05, 4.1739036532817408e-05, 4.2546311306068674e-05, 4.3193540477659553e-05, 4.8576399422017857e-05, 4.2790274164872244e-05, 4.1268929635407403e-05, 4.3354415538487956e-05, 4.0138835174730048e-05, 4.2075582314282656e-05, 4.1290964873041958e-05, } };
const TfArray<32, int> quant41_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[2*1*1*32] = { 
  /* [0][0][][] */ -75,-7,-36,-35,69,-2,127,4,7,-72,-78,-71,87,-16,85,-38,-71,-3,44,13,84,-53,93,-33,-21,113,7,-77,-73,-72,1,23, 
  /* [1][0][][] */ 100,127,-90,-82,20,103,13,-59,79,-99,-89,59,-77,6,35,91,-96,102,108,76,-76,1,-25,51,109,-16,-81,-94,65,88,121,-112, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant42_scale = { 2, { 0.0042268452234566212, 0.0034301483538001776, } };
const TfArray<2, int> quant42_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int32_t tensor_data43[2] = { 30442, -37242, };
const TfArray<1, int> tensor_dimension43 = { 1, { 2 } };
const TfArray<2, float> quant43_scale = { 2, { 0.00017360286437906325, 0.00014088132593315095, } };
const TfArray<2, int> quant43_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.44600701332092285, } };
const TfArray<1, int> quant46_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.37338447570800781, } };
const TfArray<1, int> quant50_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.51714873313903809, } };
const TfArray<1, int> quant53_zero = { 1, { -22 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.54926687479019165, } };
const TfArray<1, int> quant54_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.25769031047821045, } };
const TfArray<1, int> quant58_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.22773644328117371, } };
const TfArray<1, int> quant61_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.30872857570648193, } };
const TfArray<1, int> quant62_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.22483386099338531, } };
const TfArray<1, int> quant65_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.35749277472496033, } };
const TfArray<1, int> quant66_zero = { 1, { 21 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.041071496903896332, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.077303580939769745, } };
const TfArray<1, int> quant69_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,8,9 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,10,11 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,12,13 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,14,15 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,16,17 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,18,19 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,20,21 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,22,23 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,24,25 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,26,27 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,28,29 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,30,31 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,32,33 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,34,35 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,36,37 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,38,39 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,40,41 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,42,43 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36912, (TfLiteIntArray*)&tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16128, (TfLiteIntArray*)&tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 288, (TfLiteIntArray*)&tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_ADD, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_ADD, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_ADD, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(size_t i, TfLiteEvalTensor *tensor) {
  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 27; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 27; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus trained_model_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  70, 
};
TfLiteStatus trained_model_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
